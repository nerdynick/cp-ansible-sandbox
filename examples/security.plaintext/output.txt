{
    "ansible_become": true,
    "ansible_check_mode": false,
    "ansible_dependent_role_names": [],
    "ansible_diff_mode": false,
    "ansible_facts": {},
    "ansible_forks": 5,
    "ansible_inventory_sources": [
        "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
    ],
    "ansible_play_batch": [
        "kfk01",
        "kfk02.main.nikoleta.aws.ps.confluent.io",
        "kfk03.main.nikoleta.aws.ps.confluent.io"
    ],
    "ansible_play_hosts": [
        "kfk01",
        "kfk02.main.nikoleta.aws.ps.confluent.io",
        "kfk03.main.nikoleta.aws.ps.confluent.io"
    ],
    "ansible_play_hosts_all": [
        "kfk01",
        "kfk02.main.nikoleta.aws.ps.confluent.io",
        "kfk03.main.nikoleta.aws.ps.confluent.io"
    ],
    "ansible_play_name": "Kafka Broker Status Finding",
    "ansible_play_role_names": [
        "confluent.variables"
    ],
    "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
    "ansible_role_names": [
        "confluent.variables"
    ],
    "ansible_run_tags": [
        "kafka_broker"
    ],
    "ansible_skip_tags": [],
    "ansible_verbosity": 0,
    "ansible_version": {
        "full": "2.9.13",
        "major": 2,
        "minor": 9,
        "revision": 13,
        "string": "2.9.13"
    },
    "archive_config_base_path": "{{ archive_destination_path }}",
    "archive_destination_path": "/opt/confluent",
    "archive_group": "",
    "archive_owner": "",
    "archive_version": "{{confluent_package_version}}",
    "audit_logs_destination_bootstrap_servers": "localhost:9092",
    "audit_logs_destination_enabled": false,
    "audit_logs_destination_listener": {
        "sasl_protocol": "{{sasl_protocol}}",
        "ssl_enabled": "{{ssl_enabled}}",
        "ssl_mutual_auth_enabled": "{{ssl_mutual_auth_enabled}}"
    },
    "binary_base_path": "{{ archive_config_base_path+'/confluent-'+archive_version if installation_method == 'archive' else '/usr' }}",
    "certs_updated": false,
    "common_role_completed": false,
    "confluent_ansible_branch": "6.0.x",
    "confluent_archive_scala_version": 2.12,
    "confluent_cli_download_enabled": "{{rbac_enabled or secrets_protection_enabled}}",
    "confluent_cli_path": "/usr/local/bin/confluent",
    "confluent_full_package_version": "{{ confluent_package_version + '-1' }}",
    "confluent_package_debian_suffix": "{{ '=' + confluent_full_package_version if confluent_full_package_version != '' else ''}}",
    "confluent_package_redhat_suffix": "{{ '-' + confluent_full_package_version if confluent_full_package_version != '' else ''}}",
    "confluent_package_version": "6.1.0",
    "confluent_repo_version": 6.1,
    "confluent_server_enabled": true,
    "control_center": {
        "appender_log_path": "{{control_center_default_log_dir}}",
        "config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/confluent-control-center/control-center-production.properties",
        "log4j_file": "{% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}{% endif %}/etc/confluent-control-center/log4j-rolling.properties",
        "properties": {},
        "server_start_file": "{{ binary_base_path }}/bin/control-center-start",
        "systemd_file": "/usr/lib/systemd/system/{{control_center_service_name}}.service",
        "systemd_override": "/etc/systemd/system/{{control_center_service_name}}.service.d/override.conf"
    },
    "control_center_additional_system_admins": "{{rbac_component_additional_system_admins}}",
    "control_center_ca_cert_path": "/var/ssl/private/ca.crt",
    "control_center_cert_path": "/var/ssl/private/control_center.crt",
    "control_center_combined_properties": "{{control_center_properties | combine_properties}}",
    "control_center_copy_files": [],
    "control_center_custom_properties": {},
    "control_center_default_group": "confluent",
    "control_center_default_internal_replication_factor": "{{ [ groups['kafka_broker'] | default(['localhost']) | length, default_internal_replication_factor ] | min }}",
    "control_center_default_log_dir": "/var/log/confluent/control-center",
    "control_center_default_user": "cp-control-center",
    "control_center_deployment_strategy": "{{deployment_strategy}}",
    "control_center_export_certs": "{{ssl_mutual_auth_enabled}}",
    "control_center_final_properties": "{{ control_center_combined_properties | combine(control_center_custom_properties) }}",
    "control_center_group": "{{control_center_default_group}}",
    "control_center_health_check_password": "{{control_center_ldap_password}}",
    "control_center_health_check_user": "{{control_center_ldap_user}}",
    "control_center_health_checks_enabled": "{{health_checks_enabled}}",
    "control_center_http_protocol": "{{ 'https' if control_center_ssl_enabled|bool else 'http' }}",
    "control_center_kafka_listener_name": "internal",
    "control_center_key_path": "/var/ssl/private/control_center.key",
    "control_center_keystore_keypass": "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else control_center_keystore_storepass }}",
    "control_center_keystore_path": "/var/ssl/private/control_center.keystore.jks",
    "control_center_keystore_storepass": "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "control_center_keytab_path": "/etc/security/keytabs/control_center.keytab",
    "control_center_ldap_password": "password",
    "control_center_ldap_user": "control-center",
    "control_center_listener_hostname": "0.0.0.0",
    "control_center_log_dir": "{{control_center.appender_log_path}}",
    "control_center_packages": [
        "confluent-common",
        "confluent-rest-utils",
        "confluent-metadata-service",
        "confluent-ce-kafka-http-server",
        "confluent-kafka-rest",
        "confluent-server-rest",
        "confluent-telemetry",
        "{{ kafka_broker_main_package }}",
        "confluent-security",
        "confluent-rebalancer",
        "confluent-control-center-fe",
        "confluent-control-center"
    ],
    "control_center_pause_rolling_deployment": "{{pause_rolling_deployment}}",
    "control_center_port": 9021,
    "control_center_properties": {
        "broker_embedded_rest_endpoint": {
            "enabled": "{{kafka_broker_rest_proxy_enabled or rbac_enabled }}",
            "properties": {
                "confluent.controlcenter.streams.cprest.url": "{{mds_http_protocol}}://{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + mds_port|string + ',' + mds_http_protocol + '://') }}:{{mds_port}}"
            }
        },
        "connect": {
            "enabled": "{{ 'kafka_connect' in groups }}",
            "properties": "{{ kafka_connect_cluster_ansible_group_names | default(['kafka_connect']) | c3_connect_properties(groups, hostvars, kafka_connect_ssl_enabled, kafka_connect_http_protocol, kafka_connect_rest_port, kafka_connect_group_id, control_center_truststore_path, control_center_truststore_storepass, control_center_keystore_path, control_center_keystore_storepass, control_center_keystore_keypass) }}"
        },
        "defaults": {
            "enabled": true,
            "properties": {
                "bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[control_center_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[control_center_kafka_listener_name]['port']}}",
                "confluent.controlcenter.command.topic.replication": "{{control_center_default_internal_replication_factor}}",
                "confluent.controlcenter.data.dir": "/var/lib/confluent/control-center",
                "confluent.controlcenter.internal.topics.replication": "{{control_center_default_internal_replication_factor}}",
                "confluent.controlcenter.rest.listeners": "{{control_center_http_protocol}}://{{control_center_listener_hostname}}:{{control_center_port}}",
                "confluent.controlcenter.streams.num.stream.threads": 8,
                "confluent.controlcenter.streams.security.protocol": "{{kafka_broker_listeners[control_center_kafka_listener_name] | kafka_protocol_defaults(ssl_enabled, sasl_protocol) }}",
                "confluent.metrics.topic.replication": "{{control_center_default_internal_replication_factor}}",
                "confluent.monitoring.interceptor.topic.replication": "{{control_center_default_internal_replication_factor}}"
            }
        },
        "kafka_client": {
            "enabled": true,
            "properties": "{{ kafka_broker_listeners[control_center_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'confluent.controlcenter.streams.', control_center_truststore_path, control_center_truststore_storepass, control_center_keystore_path, control_center_keystore_storepass, control_center_keystore_keypass, false, sasl_plain_users.control_center.principal, sasl_plain_users.control_center.password, sasl_scram_users.control_center.principal, sasl_scram_users.control_center.password, kerberos_kafka_broker_primary, control_center_keytab_path, control_center_kerberos_principal|default('c3'), false, control_center_ldap_user, control_center_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "ksql": {
            "enabled": "{{ 'ksql' in groups }}",
            "properties": "{{ ksql_cluster_ansible_group_names | default(['ksql']) | c3_ksql_properties(groups, hostvars, ksql_ssl_enabled, ksql_http_protocol, ksql_listener_port, control_center_truststore_path, control_center_truststore_storepass, control_center_keystore_path, control_center_keystore_storepass, control_center_keystore_keypass) }}"
        },
        "rbac": {
            "enabled": "{{rbac_enabled}}",
            "properties": {
                "confluent.controlcenter.rest.authentication.method": "BEARER",
                "confluent.metadata.basic.auth.user.info": "{{ control_center_ldap_user | default('c3') }}:{{ control_center_ldap_password | default('pass') }}",
                "confluent.metadata.bootstrap.server.urls": "{{mds_bootstrap_server_urls}}",
                "public.key.path": "{{rbac_enabled_public_pem_path}}"
            }
        },
        "rbac_external_client": {
            "enabled": "{{rbac_enabled and external_mds_enabled and mds_tls_enabled }}",
            "properties": {
                "confluent.controlcenter.streams.ssl.truststore.location": "{{control_center_truststore_path}}",
                "confluent.controlcenter.streams.ssl.truststore.password": "{{control_center_truststore_storepass}}"
            }
        },
        "sr": {
            "enabled": "{{ 'schema_registry' in groups }}",
            "properties": {
                "confluent.controlcenter.schema.registry.url": "{{schema_registry_url}}"
            }
        },
        "sr_ssl": {
            "enabled": "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}",
            "properties": {
                "confluent.controlcenter.schema.registry.schema.registry.ssl.key.password": "{{control_center_keystore_keypass}}",
                "confluent.controlcenter.schema.registry.schema.registry.ssl.keystore.location": "{{control_center_keystore_path}}",
                "confluent.controlcenter.schema.registry.schema.registry.ssl.keystore.password": "{{control_center_keystore_storepass}}",
                "confluent.controlcenter.schema.registry.schema.registry.ssl.truststore.location": "{{control_center_truststore_path}}",
                "confluent.controlcenter.schema.registry.schema.registry.ssl.truststore.password": "{{control_center_truststore_storepass}}"
            }
        },
        "ssl": {
            "enabled": "{{control_center_ssl_enabled or (kafka_broker_rest_proxy_enabled and mds_tls_enabled) }}",
            "properties": {
                "confluent.controlcenter.rest.ssl.key.password": "{{control_center_keystore_keypass}}",
                "confluent.controlcenter.rest.ssl.keystore.location": "{{control_center_keystore_path}}",
                "confluent.controlcenter.rest.ssl.keystore.password": "{{control_center_keystore_storepass}}",
                "confluent.controlcenter.rest.ssl.truststore.location": "{{control_center_truststore_path}}",
                "confluent.controlcenter.rest.ssl.truststore.password": "{{control_center_truststore_storepass}}"
            }
        },
        "telemetry": {
            "enabled": "{{control_center_telemetry_enabled}}",
            "properties": {
                "confluent.telemetry.api.key": "{{telemetry_api_key}}",
                "confluent.telemetry.api.secret": "{{telemetry_api_secret}}",
                "confluent.telemetry.enabled": "true",
                "metric.reporters": "io.confluent.telemetry.reporter.TelemetryReporter"
            }
        },
        "telemetry_labels": {
            "enabled": "{{control_center_telemetry_ansible_labels_enabled}}",
            "properties": {
                "confluent.telemetry.labels.confluent.ansible.playbooks.version": "{{confluent_ansible_branch}}"
            }
        },
        "telemetry_proxy": {
            "enabled": "{{control_center_telemetry_enabled and telemetry_proxy_url != ''}}",
            "properties": {
                "confluent.telemetry.proxy.url": "{{telemetry_proxy_url}}"
            }
        },
        "telemetry_proxy_auth": {
            "enabled": "{{control_center_telemetry_enabled and telemetry_proxy_username != ''}}",
            "properties": {
                "confluent.telemetry.proxy.password": "{{telemetry_proxy_password}}",
                "confluent.telemetry.proxy.username": "{{telemetry_proxy_username}}"
            }
        }
    },
    "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
    "control_center_secrets_protection_enabled": "{{secrets_protection_enabled}}",
    "control_center_secrets_protection_encrypt_passwords": "{{control_center_secrets_protection_enabled}}",
    "control_center_secrets_protection_encrypt_properties": [],
    "control_center_service_name": "confluent-control-center",
    "control_center_ssl_enabled": "{{ssl_enabled}}",
    "control_center_telemetry_ansible_labels_enabled": "{{control_center_telemetry_enabled}}",
    "control_center_telemetry_enabled": "{{telemetry_enabled}}",
    "control_center_truststore_path": "/var/ssl/private/control_center.truststore.jks",
    "control_center_truststore_storepass": "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "control_center_user": "{{control_center_default_user}}",
    "create_mds_certs": "{{ rbac_enabled }}",
    "custom_log4j": true,
    "default_internal_replication_factor": 3,
    "deployment_strategy": "rolling",
    "environment": [
        "{{ proxy_env }}"
    ],
    "external_mds_enabled": false,
    "fips_enabled": false,
    "fips_jar_path": "/usr/share/java/kafka/bc-fips-*.jar",
    "fips_provider_class": "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider",
    "group_names": [
        "kafka_broker",
        "kafka_broker_main",
        "main"
    ],
    "groups": {
        "all": [
            "kfk01",
            "kfk02.main.nikoleta.aws.ps.confluent.io",
            "kfk03.main.nikoleta.aws.ps.confluent.io",
            "zk01",
            "zk02.main.nikoleta.aws.ps.confluent.io",
            "zk03.main.nikoleta.aws.ps.confluent.io",
            "sr01.main.nikoleta.aws.ps.confluent.io",
            "connect01.main.nikoleta.aws.ps.confluent.io",
            "ksql01.main.nikoleta.aws.ps.confluent.io",
            "rest01.main.nikoleta.aws.ps.confluent.io",
            "zk01.central.nikoleta.aws.ps.confluent.io",
            "kfk01.central.nikoleta.aws.ps.confluent.io",
            "ccc01.central.nikoleta.aws.ps.confluent.io"
        ],
        "central": [
            "zk01.central.nikoleta.aws.ps.confluent.io",
            "kfk01.central.nikoleta.aws.ps.confluent.io",
            "ccc01.central.nikoleta.aws.ps.confluent.io"
        ],
        "control_center_central": [
            "ccc01.central.nikoleta.aws.ps.confluent.io"
        ],
        "kafka_broker": [
            "kfk01",
            "kfk02.main.nikoleta.aws.ps.confluent.io",
            "kfk03.main.nikoleta.aws.ps.confluent.io"
        ],
        "kafka_broker_central": [
            "kfk01.central.nikoleta.aws.ps.confluent.io"
        ],
        "kafka_broker_main": [
            "kfk01",
            "kfk02.main.nikoleta.aws.ps.confluent.io",
            "kfk03.main.nikoleta.aws.ps.confluent.io"
        ],
        "kafka_connect": [
            "connect01.main.nikoleta.aws.ps.confluent.io"
        ],
        "kafka_connect_main": [
            "connect01.main.nikoleta.aws.ps.confluent.io"
        ],
        "kafka_rest": [
            "rest01.main.nikoleta.aws.ps.confluent.io"
        ],
        "kafka_rest_main": [
            "rest01.main.nikoleta.aws.ps.confluent.io"
        ],
        "ksql": [
            "ksql01.main.nikoleta.aws.ps.confluent.io"
        ],
        "ksql_main": [
            "ksql01.main.nikoleta.aws.ps.confluent.io"
        ],
        "main": [
            "zk01",
            "zk02.main.nikoleta.aws.ps.confluent.io",
            "zk03.main.nikoleta.aws.ps.confluent.io",
            "kfk01",
            "kfk02.main.nikoleta.aws.ps.confluent.io",
            "kfk03.main.nikoleta.aws.ps.confluent.io",
            "sr01.main.nikoleta.aws.ps.confluent.io",
            "connect01.main.nikoleta.aws.ps.confluent.io",
            "ksql01.main.nikoleta.aws.ps.confluent.io",
            "rest01.main.nikoleta.aws.ps.confluent.io"
        ],
        "schema_registry": [
            "sr01.main.nikoleta.aws.ps.confluent.io"
        ],
        "schema_registry_main": [
            "sr01.main.nikoleta.aws.ps.confluent.io"
        ],
        "ungrouped": [],
        "zookeeper": [
            "zk01",
            "zk02.main.nikoleta.aws.ps.confluent.io",
            "zk03.main.nikoleta.aws.ps.confluent.io"
        ],
        "zookeeper_central": [
            "zk01.central.nikoleta.aws.ps.confluent.io"
        ],
        "zookeeper_main": [
            "zk01",
            "zk02.main.nikoleta.aws.ps.confluent.io",
            "zk03.main.nikoleta.aws.ps.confluent.io"
        ]
    },
    "health_checks_enabled": true,
    "hostname": "kfk02.main.nikoleta.aws.ps.confluent.io",
    "hostvars": {
        "ccc01.central.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "central",
                "control_center_central"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "ccc01.central.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "ccc01",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "connect01.main.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "kafka_connect",
                "kafka_connect_main",
                "main"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "connect01.main.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "connect01",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_metrics_reporter_group": "kafka_broker",
            "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
            "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
            "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
            "kafka_broker_metrics_reporter_nodes": [
                "kfk01",
                "kfk02.main.nikoleta.aws.ps.confluent.io",
                "kfk03.main.nikoleta.aws.ps.confluent.io"
            ],
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "kfk01": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_host": "kfk01.main.nikoleta.aws.ps.confluent.io",
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "kafka_broker",
                "kafka_broker_main",
                "main"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "kfk01",
            "inventory_hostname_short": "kfk01",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_metrics_reporter_group": "kafka_broker",
            "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
            "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
            "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
            "kafka_broker_metrics_reporter_nodes": [
                "kfk01",
                "kfk02.main.nikoleta.aws.ps.confluent.io",
                "kfk03.main.nikoleta.aws.ps.confluent.io"
            ],
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "kfk01.central.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "central",
                "kafka_broker_central"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "kfk01.central.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "kfk01",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "kfk02.main.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "kafka_broker",
                "kafka_broker_main",
                "main"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "hostname": "kfk02.main.nikoleta.aws.ps.confluent.io",
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "kfk02.main.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "kfk02",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_metrics_reporter_group": "kafka_broker",
            "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
            "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
            "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
            "kafka_broker_metrics_reporter_nodes": [
                "kfk01",
                "kfk02.main.nikoleta.aws.ps.confluent.io",
                "kfk03.main.nikoleta.aws.ps.confluent.io"
            ],
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "kfk03.main.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "kafka_broker",
                "kafka_broker_main",
                "main"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "kfk03.main.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "kfk03",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_metrics_reporter_group": "kafka_broker",
            "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
            "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
            "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
            "kafka_broker_metrics_reporter_nodes": [
                "kfk01",
                "kfk02.main.nikoleta.aws.ps.confluent.io",
                "kfk03.main.nikoleta.aws.ps.confluent.io"
            ],
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "ksql01.main.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "ksql",
                "ksql_main",
                "main"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "ksql01.main.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "ksql01",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_metrics_reporter_group": "kafka_broker",
            "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
            "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
            "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
            "kafka_broker_metrics_reporter_nodes": [
                "kfk01",
                "kfk02.main.nikoleta.aws.ps.confluent.io",
                "kfk03.main.nikoleta.aws.ps.confluent.io"
            ],
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "rest01.main.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "kafka_rest",
                "kafka_rest_main",
                "main"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "rest01.main.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "rest01",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_metrics_reporter_group": "kafka_broker",
            "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
            "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
            "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
            "kafka_broker_metrics_reporter_nodes": [
                "kfk01",
                "kfk02.main.nikoleta.aws.ps.confluent.io",
                "kfk03.main.nikoleta.aws.ps.confluent.io"
            ],
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "sr01.main.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "main",
                "schema_registry",
                "schema_registry_main"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "sr01.main.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "sr01",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_metrics_reporter_group": "kafka_broker",
            "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
            "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
            "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
            "kafka_broker_metrics_reporter_nodes": [
                "kfk01",
                "kfk02.main.nikoleta.aws.ps.confluent.io",
                "kfk03.main.nikoleta.aws.ps.confluent.io"
            ],
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "zk01": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_host": "zk01.main.nikoleta.aws.ps.confluent.io",
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "main",
                "zookeeper",
                "zookeeper_main"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "zk01",
            "inventory_hostname_short": "zk01",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_metrics_reporter_group": "kafka_broker",
            "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
            "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
            "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
            "kafka_broker_metrics_reporter_nodes": [
                "kfk01",
                "kfk02.main.nikoleta.aws.ps.confluent.io",
                "kfk03.main.nikoleta.aws.ps.confluent.io"
            ],
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "zk01.central.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "central",
                "zookeeper_central"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "zk01.central.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "zk01",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "zk02.main.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "main",
                "zookeeper",
                "zookeeper_main"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "hostname": "zk02.main.nikoleta.aws.ps.confluent.io",
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "zk02.main.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "zk02",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_metrics_reporter_group": "kafka_broker",
            "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
            "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
            "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
            "kafka_broker_metrics_reporter_nodes": [
                "kfk01",
                "kfk02.main.nikoleta.aws.ps.confluent.io",
                "kfk03.main.nikoleta.aws.ps.confluent.io"
            ],
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        },
        "zk03.main.nikoleta.aws.ps.confluent.io": {
            "ansible_become": true,
            "ansible_check_mode": false,
            "ansible_diff_mode": false,
            "ansible_facts": {},
            "ansible_forks": 5,
            "ansible_inventory_sources": [
                "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main"
            ],
            "ansible_playbook_python": "/usr/local/Cellar/ansible/2.9.13_1/libexec/bin/python",
            "ansible_run_tags": [
                "kafka_broker"
            ],
            "ansible_skip_tags": [],
            "ansible_verbosity": 0,
            "ansible_version": {
                "full": "2.9.13",
                "major": 2,
                "minor": 9,
                "revision": 13,
                "string": "2.9.13"
            },
            "control_center_custom_properties": {},
            "control_center_rocksdb_path": "/var/lib/confluent/control-center/rocksdb",
            "group_names": [
                "main",
                "zookeeper",
                "zookeeper_main"
            ],
            "groups": {
                "all": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io",
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io",
                    "kfk01.central.nikoleta.aws.ps.confluent.io",
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "control_center_central": [
                    "ccc01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_central": [
                    "kfk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_broker_main": [
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_connect_main": [
                    "connect01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "kafka_rest_main": [
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ksql_main": [
                    "ksql01.main.nikoleta.aws.ps.confluent.io"
                ],
                "main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io",
                    "kfk01",
                    "kfk02.main.nikoleta.aws.ps.confluent.io",
                    "kfk03.main.nikoleta.aws.ps.confluent.io",
                    "sr01.main.nikoleta.aws.ps.confluent.io",
                    "connect01.main.nikoleta.aws.ps.confluent.io",
                    "ksql01.main.nikoleta.aws.ps.confluent.io",
                    "rest01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "schema_registry_main": [
                    "sr01.main.nikoleta.aws.ps.confluent.io"
                ],
                "ungrouped": [],
                "zookeeper": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_central": [
                    "zk01.central.nikoleta.aws.ps.confluent.io"
                ],
                "zookeeper_main": [
                    "zk01",
                    "zk02.main.nikoleta.aws.ps.confluent.io",
                    "zk03.main.nikoleta.aws.ps.confluent.io"
                ]
            },
            "install_java": true,
            "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
            "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
            "inventory_hostname": "zk03.main.nikoleta.aws.ps.confluent.io",
            "inventory_hostname_short": "zk03",
            "jmxexporter_enabled": true,
            "jolokia_enabled": true,
            "kafka_broker": {
                "datadir": [
                    "/var/lib/kafka/data"
                ]
            },
            "kafka_broker_custom_properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
                "confluent.metrics.reporter.topic.retention.ms": 10800000,
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "false",
                "default.replication.factor": "3",
                "log.retention.hours": 3,
                "min.insync.replicas": "2"
            },
            "kafka_broker_metrics_reporter_group": "kafka_broker",
            "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
            "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
            "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
            "kafka_broker_metrics_reporter_nodes": [
                "kfk01",
                "kfk02.main.nikoleta.aws.ps.confluent.io",
                "kfk03.main.nikoleta.aws.ps.confluent.io"
            ],
            "kafka_broker_service_environment_overrides": {
                "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
            },
            "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
            "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
            "sasl_protocol": "none",
            "schema_registry_custom_properties": {},
            "ssl_enabled": false,
            "ssl_mutual_auth_enabled": false,
            "zookeeper_custom_properties": {
                "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
                "tcpKeepAlive": "true"
            }
        }
    },
    "install_java": true,
    "installation_method": "package",
    "inventory_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main",
    "inventory_file": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext/inv.centralized/main/core.inventory.yml",
    "inventory_hostname": "kfk02.main.nikoleta.aws.ps.confluent.io",
    "inventory_hostname_short": "kfk02",
    "jmxexporter_enabled": true,
    "jmxexporter_jar_path": "/opt/prometheus/jmx_prometheus_javaagent.jar",
    "jmxexporter_url_remote": true,
    "jolokia_auth_mode": "none",
    "jolokia_enabled": true,
    "jolokia_jar_path": "/opt/jolokia/jolokia.jar",
    "jolokia_password": "password",
    "jolokia_url_remote": true,
    "jolokia_user": "admin",
    "kafka_broker": {
        "appender_log_path": "{{kafka_broker_default_log_dir}}",
        "client_config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/client.properties",
        "config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/server.properties",
        "datadir": [
            "/var/lib/kafka/data"
        ],
        "jaas_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/kafka_server_jaas.conf",
        "log4j_file": "{% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}{% endif %}/etc/kafka/log4j.properties",
        "properties": {},
        "server_start_file": "{{ binary_base_path }}/bin/kafka-server-start",
        "systemd_file": "/usr/lib/systemd/system/{{kafka_broker_service_name}}.service",
        "systemd_override": "/etc/systemd/system/{{kafka_broker_service_name}}.service.d/override.conf",
        "zookeeper_tls_client_config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/zookeeper-tls-client.properties"
    },
    "kafka_broker_additional_system_admins": "{{rbac_component_additional_system_admins}}",
    "kafka_broker_ca_cert_path": "/var/ssl/private/ca.crt",
    "kafka_broker_cert_path": "/var/ssl/private/kafka_broker.crt",
    "kafka_broker_client_properties": "{{ kafka_broker_listeners[kafka_broker_inter_broker_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, '', kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass, false, sasl_plain_users.admin.principal, sasl_plain_users.admin.password, sasl_scram_users.admin.principal, sasl_scram_users.admin.password, kerberos_kafka_broker_primary, kafka_broker_keytab_path, kafka_broker_kerberos_principal|default('kafka'), false, kafka_broker_ldap_user, kafka_broker_ldap_password, mds_bootstrap_server_urls) }}",
    "kafka_broker_cluster_name": "",
    "kafka_broker_combined_properties": "{{kafka_broker_properties | combine_properties}}",
    "kafka_broker_configure_additional_brokers": true,
    "kafka_broker_configure_multiple_listeners": "{{kafka_broker_configure_additional_brokers}}",
    "kafka_broker_copy_files": [],
    "kafka_broker_custom_listeners": {
        "broker": {
            "name": "BROKER",
            "port": 9091,
            "sasl_protocol": "{{ sasl_protocol }}",
            "ssl_enabled": "{{ ssl_enabled }}",
            "ssl_mutual_auth_enabled": "{{ ssl_mutual_auth_enabled }}"
        }
    },
    "kafka_broker_custom_properties": {
        "confluent.metrics.reporter.bootstrap.servers": "{{ kafka_broker_metrics_reporter_nodes | join(':' + kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port']|string + ',') }}:{{ kafka_broker_metrics_reporter_listeners[kafka_broker_metrics_reporter_listener_name]['port'] }}",
        "confluent.metrics.reporter.topic.retention.ms": 10800000,
        "confluent.support.customer.id": "anonymous",
        "confluent.support.metrics.enable": "false",
        "default.replication.factor": "{{ [groups['kafka_broker'] | length, 3] | min }}",
        "log.retention.hours": 3,
        "min.insync.replicas": "{{ [[groups['kafka_broker'] | length -1 , 1] | max, 2] | min }}"
    },
    "kafka_broker_default_group": "confluent",
    "kafka_broker_default_internal_replication_factor": "{{ [ groups['kafka_broker'] | default(['localhost']) | length, default_internal_replication_factor ] | min }}",
    "kafka_broker_default_listeners": {
        "internal": {
            "name": "INTERNAL",
            "port": 9092,
            "sasl_protocol": "{{ 'OAUTH' if rbac_enabled|bool else sasl_protocol }}",
            "ssl_enabled": "{{ ssl_enabled }}",
            "ssl_mutual_auth_enabled": "{{ ssl_mutual_auth_enabled }}"
        }
    },
    "kafka_broker_default_log_dir": "/var/log/kafka",
    "kafka_broker_default_user": "cp-kafka",
    "kafka_broker_deployment_strategy": "{{deployment_strategy}}",
    "kafka_broker_erp_clusters_url": "{{mds_http_protocol}}://{{ mds_advertised_listener_hostname | default(hostvars[inventory_hostname]|resolve_hostname) }}:{{mds_port}}/kafka/v3/clusters",
    "kafka_broker_export_certs": "{{ssl_mutual_auth_enabled}}",
    "kafka_broker_final_properties": "{{ kafka_broker_combined_properties | combine(kafka_broker_custom_properties) }}",
    "kafka_broker_group": "{{kafka_broker_default_group}}",
    "kafka_broker_health_checks_enabled": "{{health_checks_enabled}}",
    "kafka_broker_inter_broker_listener_name": "{{ 'broker' if kafka_broker_configure_multiple_listeners|bool else 'internal' }}",
    "kafka_broker_jmxexporter_config_path": "/opt/prometheus/kafka.yml",
    "kafka_broker_jmxexporter_enabled": "{{jmxexporter_enabled}}",
    "kafka_broker_jmxexporter_port": 8080,
    "kafka_broker_jolokia_active_controller_url": "{{ 'https' if kafka_broker_jolokia_ssl_enabled|bool else 'http' }}://{{ hostvars[inventory_hostname]|resolve_hostname }}:{{kafka_broker_jolokia_port}}/jolokia/read/kafka.controller:type=KafkaController,name=ActiveControllerCount",
    "kafka_broker_jolokia_auth_mode": "{{jolokia_auth_mode}}",
    "kafka_broker_jolokia_config": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/kafka_jolokia.properties",
    "kafka_broker_jolokia_enabled": "{{jolokia_enabled}}",
    "kafka_broker_jolokia_java_arg_ssl_addon": ",keystore={{kafka_broker_keystore_path}},keystorePassword={{kafka_broker_keystore_storepass}},protocol=https",
    "kafka_broker_jolokia_password": "{{jolokia_password}}",
    "kafka_broker_jolokia_port": 7771,
    "kafka_broker_jolokia_ssl_enabled": "{{ ssl_enabled }}",
    "kafka_broker_jolokia_urp_url": "{{ 'https' if kafka_broker_jolokia_ssl_enabled|bool else 'http' }}://{{ hostvars[inventory_hostname]|resolve_hostname }}:{{kafka_broker_jolokia_port}}/jolokia/read/kafka.server:type=ReplicaManager,name=UnderReplicatedPartitions",
    "kafka_broker_jolokia_user": "{{jolokia_user}}",
    "kafka_broker_key_path": "/var/ssl/private/kafka_broker.key",
    "kafka_broker_keystore_keypass": "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_broker_keystore_storepass }}",
    "kafka_broker_keystore_path": "/var/ssl/private/kafka_broker.keystore.jks",
    "kafka_broker_keystore_storepass": "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "kafka_broker_keytab_path": "/etc/security/keytabs/kafka_broker.keytab",
    "kafka_broker_ldap_password": "{{mds_super_user_password}}",
    "kafka_broker_ldap_user": "{{mds_super_user}}",
    "kafka_broker_listeners": "{{ kafka_broker_default_listeners | combine(kafka_broker_custom_listeners, recursive=True) if kafka_broker_configure_multiple_listeners|bool else  kafka_broker_default_listeners}}",
    "kafka_broker_log_dir": "{{kafka_broker.appender_log_path}}",
    "kafka_broker_main_package": "{{ 'confluent-server' if confluent_server_enabled|bool else 'confluent-kafka'}}",
    "kafka_broker_metrics_reporter_enabled": "{{ 'control_center' in groups }}",
    "kafka_broker_metrics_reporter_group": "kafka_broker",
    "kafka_broker_metrics_reporter_hostvars": "{{ hostvars[kafka_broker_metrics_reporter_nodes | first] }}",
    "kafka_broker_metrics_reporter_listener_name": "{{ kafka_broker_inter_broker_listener_name }}",
    "kafka_broker_metrics_reporter_listeners": "{{ kafka_broker_listeners | combine( kafka_broker_metrics_reporter_hostvars.kafka_broker_custom_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_default_listeners | default({}), kafka_broker_metrics_reporter_hostvars.kafka_broker_listeners | default({}), recursive=True )}}",
    "kafka_broker_metrics_reporter_nodes": "{{ groups[kafka_broker_metrics_reporter_group] | default(['localhost']) }}",
    "kafka_broker_packages": [
        "confluent-common",
        "confluent-rest-utils",
        "confluent-metadata-service",
        "confluent-ce-kafka-http-server",
        "confluent-kafka-rest",
        "confluent-server-rest",
        "confluent-telemetry",
        "{{ kafka_broker_main_package }}",
        "confluent-rebalancer",
        "confluent-security"
    ],
    "kafka_broker_pause_rolling_deployment": "{{pause_rolling_deployment}}",
    "kafka_broker_properties": {
        "audit_logs_destination": {
            "enabled": "{{audit_logs_destination_enabled and rbac_enabled}}",
            "properties": {
                "confluent.security.event.logger.exporter.kafka.bootstrap.servers": "{{audit_logs_destination_bootstrap_servers}}",
                "confluent.security.event.logger.exporter.kafka.topic.create": "false"
            }
        },
        "audit_logs_destination_admin": {
            "enabled": "{{audit_logs_destination_enabled and rbac_enabled and not external_mds_enabled}}",
            "properties": {
                "confluent.security.event.logger.destination.admin.bootstrap.servers": "{{audit_logs_destination_bootstrap_servers}}"
            }
        },
        "audit_logs_destination_admin_client": {
            "enabled": "{{audit_logs_destination_enabled and rbac_enabled and not external_mds_enabled}}",
            "properties": "{{ audit_logs_destination_listener | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'confluent.security.event.logger.destination.admin.', kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass, false, sasl_plain_users.admin.principal, sasl_plain_users.admin.password, sasl_scram_users.admin.principal, sasl_scram_users.admin.password, kerberos_kafka_broker_primary|default('kafka'), kafka_broker_keytab_path, kafka_broker_kerberos_principal|default('kafka'), false, 'user', 'pass', mds_bootstrap_server_urls) }}"
        },
        "audit_logs_destination_client": {
            "enabled": "{{audit_logs_destination_enabled and rbac_enabled}}",
            "properties": "{{ audit_logs_destination_listener | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'confluent.security.event.logger.exporter.kafka.', kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass, false, sasl_plain_users.admin.principal, sasl_plain_users.admin.password, sasl_scram_users.admin.principal, sasl_scram_users.admin.password, kerberos_kafka_broker_primary|default('kafka'), kafka_broker_keytab_path, kafka_broker_kerberos_principal|default('kafka'), false, 'user', 'pass', mds_bootstrap_server_urls) }}"
        },
        "broker_id": {
            "enabled": "{{ inventory_hostname in groups.kafka_broker }}",
            "properties": {
                "broker.id": "{{ broker_id | default( groups.kafka_broker.index(inventory_hostname) + 1 ) if inventory_hostname in groups.kafka_broker else 0 }}"
            }
        },
        "defaults": {
            "enabled": true,
            "properties": {
                "advertised.listeners": "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}://{{ listener['value']['hostname'] | default(hostvars[inventory_hostname]|resolve_hostname)  }}:{{ listener['value']['port'] }}{% endfor %}",
                "confluent.ansible.managed": "true",
                "confluent.balancer.topic.replication.factor": "{{kafka_broker_default_internal_replication_factor}}",
                "confluent.license.topic": "_confluent-license",
                "confluent.license.topic.replication.factor": "{{kafka_broker_default_internal_replication_factor}}",
                "confluent.metadata.topic.replication.factor": "{{kafka_broker_default_internal_replication_factor}}",
                "confluent.security.event.logger.exporter.kafka.topic.replicas": "{{audit_logs_destination_bootstrap_servers.split(',')|length if audit_logs_destination_enabled and rbac_enabled else kafka_broker_default_internal_replication_factor}}",
                "confluent.support.customer.id": "anonymous",
                "confluent.support.metrics.enable": "true",
                "group.initial.rebalance.delay.ms": 3000,
                "inter.broker.listener.name": "{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['name']}}",
                "kafka.rest.enable": "{{kafka_broker_rest_proxy_enabled|string|lower}}",
                "listener.security.protocol.map": "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}:{{ listener['value'] | kafka_protocol_defaults(ssl_enabled, sasl_protocol)}}{% endfor %}",
                "listeners": "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}://:{{ listener['value']['port'] }}{% endfor %}",
                "log.dirs": "{{ kafka_broker.datadir | join(',') }}",
                "log.retention.check.interval.ms": 300000,
                "log.retention.hours": 168,
                "log.segment.bytes": 1073741824,
                "num.io.threads": 16,
                "num.network.threads": 8,
                "num.partitions": 1,
                "num.recovery.threads.per.data.dir": 2,
                "offsets.topic.replication.factor": "{{kafka_broker_default_internal_replication_factor}}",
                "socket.receive.buffer.bytes": 102400,
                "socket.request.max.bytes": 104857600,
                "socket.send.buffer.bytes": 102400,
                "transaction.state.log.min.isr": "{{ [ 2, kafka_broker_default_internal_replication_factor|int ] | min }}",
                "transaction.state.log.replication.factor": "{{kafka_broker_default_internal_replication_factor}}",
                "zookeeper.connect": "{{ groups['zookeeper'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + zookeeper_client_port|string + ',') }}:{{zookeeper_client_port}}",
                "zookeeper.connection.timeout.ms": 18000
            }
        },
        "embedded_rest_proxy": {
            "enabled": "{{ kafka_broker_rest_proxy_enabled and (not rbac_enabled or (rbac_enabled and external_mds_enabled)) }}",
            "properties": {
                "confluent.http.server.advertised.listeners": "{{mds_http_protocol}}://{{ mds_advertised_listener_hostname | default(hostvars[inventory_hostname]|resolve_hostname) }}:{{mds_port}}",
                "confluent.http.server.listeners": "{{mds_http_protocol}}://0.0.0.0:{{mds_port}}"
            }
        },
        "embedded_rest_proxy_client": {
            "enabled": "{{ kafka_broker_rest_proxy_enabled }}",
            "properties": "{{ kafka_broker_listeners['internal'] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'kafka.rest.client.', kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass, false, sasl_plain_users.admin.principal, sasl_plain_users.admin.password, sasl_scram_users.admin.principal, sasl_scram_users.admin.password, kerberos_kafka_broker_primary, kafka_broker_keytab_path, kafka_broker_kerberos_principal|default('kafka'), true, kafka_broker_ldap_user, kafka_broker_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "embedded_rest_proxy_client_bootstrap": {
            "enabled": "{{ kafka_broker_rest_proxy_enabled }}",
            "properties": {
                "kafka.rest.bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners['internal']['port']|string + ',') }}:{{kafka_broker_listeners['internal']['port']}}"
            }
        },
        "embedded_rest_proxy_rbac": {
            "enabled": "{{ kafka_broker_rest_proxy_enabled and rbac_enabled }}",
            "properties": {
                "kafka.rest.confluent.metadata.basic.auth.user.info": "{{kafka_broker_ldap_user | default('kafka') }}:{{kafka_broker_ldap_password | default('pass')}}",
                "kafka.rest.confluent.metadata.bootstrap.server.urls": "{{mds_bootstrap_server_urls}}",
                "kafka.rest.confluent.metadata.http.auth.credentials.provider": "BASIC",
                "kafka.rest.kafka.rest.resource.extension.class": "io.confluent.kafkarest.security.KafkaRestSecurityResourceExtension",
                "kafka.rest.public.key.path": "{{rbac_enabled_public_pem_path}}",
                "kafka.rest.rest.servlet.initializor.classes": "io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler"
            }
        },
        "embedded_rest_proxy_rbac_ssl": {
            "enabled": "{{rbac_enabled and mds_tls_enabled}}",
            "properties": {
                "kafka.rest.confluent.metadata.ssl.truststore.location": "{{kafka_broker_truststore_path}}",
                "kafka.rest.confluent.metadata.ssl.truststore.password": "{{kafka_broker_truststore_storepass}}"
            }
        },
        "embedded_rest_proxy_ssl": {
            "enabled": "{{ kafka_broker_rest_proxy_enabled and (not rbac_enabled or (rbac_enabled and external_mds_enabled)) and kafka_broker_rest_ssl_enabled }}",
            "properties": {
                "confluent.http.server.ssl.key.password": "{{kafka_broker_keystore_keypass}}",
                "confluent.http.server.ssl.keystore.location": "{{kafka_broker_keystore_path}}",
                "confluent.http.server.ssl.keystore.password": "{{kafka_broker_keystore_storepass}}",
                "confluent.http.server.ssl.truststore.location": "{{kafka_broker_truststore_path}}",
                "confluent.http.server.ssl.truststore.password": "{{kafka_broker_truststore_storepass}}"
            }
        },
        "embedded_rest_proxy_ssl_fips": {
            "enabled": "{{ kafka_broker_rest_proxy_enabled and (not rbac_enabled or (rbac_enabled and external_mds_enabled)) and kafka_broker_rest_ssl_enabled and pkcs12_enabled}}",
            "properties": {
                "confluent.http.server.ssl.keymanager.algorithm": "PKIX",
                "confluent.http.server.ssl.keystore.type": "PKCS12",
                "confluent.http.server.ssl.trustmanager.algorithm": "PKIX",
                "confluent.http.server.ssl.truststore.type": "PKCS12"
            }
        },
        "fips": {
            "enabled": "{{fips_enabled}}",
            "properties": {
                "enable.fips": "true",
                "security.providers": "io.confluent.kafka.security.fips.provider.BcFipsProviderCreator,io.confluent.kafka.security.fips.provider.BcFipsJsseProviderCreator"
            }
        },
        "inter_broker_sasl": {
            "enabled": "{{ kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol != 'none' }}",
            "properties": {
                "sasl.mechanism.inter.broker.protocol": "{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol}}"
            }
        },
        "listeners": {
            "enabled": true,
            "properties": "{{ kafka_broker_listeners | listener_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass, plain_jaas_config, kafka_broker_keytab_path, kafka_broker_kerberos_principal|default('kafka'), kerberos_kafka_broker_primary, sasl_scram_users.admin.principal, sasl_scram_users.admin.password, rbac_enabled_public_pem_path ) }}"
        },
        "metrics_reporter": {
            "enabled": "{{ kafka_broker_metrics_reporter_enabled|bool }}",
            "properties": {
                "confluent.metrics.reporter.bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['port']}}",
                "confluent.metrics.reporter.topic.replicas": "{{kafka_broker_default_internal_replication_factor}}",
                "metric.reporters": "io.confluent.metrics.reporter.ConfluentMetricsReporter"
            }
        },
        "metrics_reporter_client": {
            "enabled": "{{ kafka_broker_metrics_reporter_enabled|bool }}",
            "properties": "{{ kafka_broker_listeners[kafka_broker_inter_broker_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'confluent.metrics.reporter.', kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass, false, sasl_plain_users.admin.principal, sasl_plain_users.admin.password, sasl_scram_users.admin.principal, sasl_scram_users.admin.password, kerberos_kafka_broker_primary, kafka_broker_keytab_path, kafka_broker_kerberos_principal|default('kafka'), false, kafka_broker_ldap_user, kafka_broker_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "rbac": {
            "enabled": "{{ rbac_enabled }}",
            "properties": {
                "authorizer.class.name": "io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer",
                "confluent.authorizer.access.rule.providers": "CONFLUENT,ZK_ACL",
                "super.users": "User:{{ mds_super_user|default('mds') }}"
            }
        },
        "rbac_external_mds": {
            "enabled": "{{rbac_enabled and external_mds_enabled}}",
            "properties": {
                "confluent.metadata.bootstrap.servers": "{{mds_broker_bootstrap_servers}}"
            }
        },
        "rbac_external_mds_client": {
            "enabled": "{{rbac_enabled and external_mds_enabled}}",
            "properties": "{{ mds_broker_listener | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'confluent.metadata.', kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass, false, sasl_plain_users.admin.principal, sasl_plain_users.admin.password, sasl_scram_users.admin.principal, sasl_scram_users.admin.password, kerberos_kafka_broker_primary, kafka_broker_keytab_path, kafka_broker_kerberos_principal|default('kafka'), false, kafka_broker_ldap_user, kafka_broker_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "rbac_mds": {
            "enabled": "{{ rbac_enabled and not external_mds_enabled }}",
            "properties": {
                "confluent.metadata.server.advertised.listeners": "{{mds_http_protocol}}://{{ mds_advertised_listener_hostname | default(hostvars[inventory_hostname]|resolve_hostname) }}:{{mds_port}}",
                "confluent.metadata.server.authentication.method": "BEARER",
                "confluent.metadata.server.listeners": "{{mds_http_protocol}}://0.0.0.0:{{mds_port}}",
                "confluent.metadata.server.public.key.path": "{{rbac_enabled_public_pem_path}}",
                "confluent.metadata.server.token.auth.enable": "true",
                "confluent.metadata.server.token.key.path": "{{rbac_enabled_private_pem_path}}",
                "confluent.metadata.server.token.max.lifetime.ms": 3600000,
                "confluent.metadata.server.token.signature.algorithm": "RS256"
            }
        },
        "rbac_mds_ldap": {
            "enabled": "{{ rbac_enabled and not external_mds_enabled }}",
            "properties": "{{ ldap_config | default('') | split_newline_to_dict }}"
        },
        "rbac_mds_ssl": {
            "enabled": "{{ rbac_enabled and not external_mds_enabled and kafka_broker_rest_ssl_enabled }}",
            "properties": {
                "confluent.metadata.server.ssl.key.password": "{{kafka_broker_keystore_keypass}}",
                "confluent.metadata.server.ssl.keystore.location": "{{kafka_broker_keystore_path}}",
                "confluent.metadata.server.ssl.keystore.password": "{{kafka_broker_keystore_storepass}}",
                "confluent.metadata.server.ssl.truststore.location": "{{kafka_broker_truststore_path}}",
                "confluent.metadata.server.ssl.truststore.password": "{{kafka_broker_truststore_storepass}}"
            }
        },
        "rbac_mds_ssl_fips": {
            "enabled": "{{ rbac_enabled and not external_mds_enabled and kafka_broker_rest_ssl_enabled and pkcs12_enabled }}",
            "properties": {
                "confluent.metadata.server.ssl.keymanager.algorithm": "PKIX",
                "confluent.metadata.server.ssl.keystore.type": "PKCS12",
                "confluent.metadata.server.ssl.trustmanager.algorithm": "PKIX",
                "confluent.metadata.server.ssl.truststore.type": "PKCS12"
            }
        },
        "sasl_enabled": {
            "enabled": "{{ kafka_broker_sasl_enabled_mechanisms|length > 0 }}",
            "properties": {
                "sasl.enabled.mechanisms": "{% for mechanism in kafka_broker_sasl_enabled_mechanisms %}{% if loop.index > 1%},{% endif %}{{ mechanism|upper }}{% endfor %}"
            }
        },
        "sasl_gssapi": {
            "enabled": "{{ 'GSSAPI' in kafka_broker_sasl_enabled_mechanisms }}",
            "properties": {
                "sasl.kerberos.service.name": "{{kerberos_kafka_broker_primary}}"
            }
        },
        "sr": {
            "enabled": "{{ kafka_broker_schema_validation_enabled and 'schema_registry' in groups }}",
            "properties": {
                "confluent.schema.registry.url": "{{schema_registry_url}}"
            }
        },
        "sr_ssl": {
            "enabled": "{{ kafka_broker_schema_validation_enabled and 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}",
            "properties": {
                "confluent.ssl.key.password": "{{kafka_broker_keystore_keypass}}",
                "confluent.ssl.keystore.location": "{{kafka_broker_keystore_path}}",
                "confluent.ssl.keystore.password": "{{kafka_broker_keystore_storepass}}",
                "confluent.ssl.truststore.location": "{{kafka_broker_truststore_path}}",
                "confluent.ssl.truststore.password": "{{kafka_broker_truststore_storepass}}"
            }
        },
        "sr_ssl_fips": {
            "enabled": "{{ kafka_broker_schema_validation_enabled and 'schema_registry' in groups and schema_registry_ssl_enabled|bool and pkcs12_enabled}}",
            "properties": {
                "confluent.ssl.keymanager.algorithm": "PKIX",
                "confluent.ssl.keystore.type": "PKCS12",
                "confluent.ssl.trustmanager.algorithm": "PKIX",
                "confluent.ssl.truststore.type": "PKCS12"
            }
        },
        "telemetry": {
            "enabled": "{{kafka_broker_telemetry_enabled}}",
            "properties": {
                "confluent.telemetry.api.key": "{{telemetry_api_key}}",
                "confluent.telemetry.api.secret": "{{telemetry_api_secret}}",
                "confluent.telemetry.enabled": "true"
            }
        },
        "telemetry_labels": {
            "enabled": "{{kafka_broker_telemetry_ansible_labels_enabled}}",
            "properties": {
                "confluent.telemetry.labels.confluent.ansible.playbooks.version": "{{confluent_ansible_branch}}"
            }
        },
        "telemetry_proxy": {
            "enabled": "{{kafka_broker_telemetry_enabled and telemetry_proxy_url != ''}}",
            "properties": {
                "confluent.telemetry.proxy.url": "{{telemetry_proxy_url}}"
            }
        },
        "telemetry_proxy_auth": {
            "enabled": "{{kafka_broker_telemetry_enabled and telemetry_proxy_username != ''}}",
            "properties": {
                "confluent.telemetry.proxy.password": "{{telemetry_proxy_password}}",
                "confluent.telemetry.proxy.username": "{{telemetry_proxy_username}}"
            }
        },
        "zk_acls": {
            "enabled": "{{ zookeeper_sasl_protocol in ['kerberos', 'digest'] }}",
            "properties": {
                "zookeeper.set.acl": "true"
            }
        },
        "zk_mtls": {
            "enabled": "{{ zookeeper_ssl_mutual_auth_enabled }}",
            "properties": {
                "zookeeper.ssl.keystore.location": "{{kafka_broker_keystore_path}}",
                "zookeeper.ssl.keystore.password": "{{kafka_broker_keystore_storepass}}"
            }
        },
        "zk_mtls_fips": {
            "enabled": "{{ zookeeper_ssl_mutual_auth_enabled and pkcs12_enabled}}",
            "properties": {
                "zookeeper.ssl.keymanager.algorithm": "PKIX",
                "zookeeper.ssl.keystore.type": "PKCS12"
            }
        },
        "zk_ssl": {
            "enabled": "{{ zookeeper_ssl_enabled }}",
            "properties": {
                "zookeeper.clientCnxnSocket": "org.apache.zookeeper.ClientCnxnSocketNetty",
                "zookeeper.ssl.client.enable": "true",
                "zookeeper.ssl.truststore.location": "{{kafka_broker_truststore_path}}",
                "zookeeper.ssl.truststore.password": "{{kafka_broker_truststore_storepass}}"
            }
        },
        "zk_ssl_fips": {
            "enabled": "{{ zookeeper_ssl_enabled and pkcs12_enabled }}",
            "properties": {
                "zookeeper.ssl.trustmanager.algorithm": "PKIX",
                "zookeeper.ssl.truststore.type": "PKCS12"
            }
        }
    },
    "kafka_broker_rest_health_check_password": "{{mds_super_user_password}}",
    "kafka_broker_rest_health_check_user": "{{mds_super_user}}",
    "kafka_broker_rest_proxy_enabled": "{{confluent_server_enabled}}",
    "kafka_broker_rest_ssl_enabled": "{{mds_ssl_enabled}}",
    "kafka_broker_sasl_enabled_mechanisms": "{{ kafka_broker_listeners | get_sasl_mechanisms(sasl_protocol) | difference(['none']) | unique }}",
    "kafka_broker_schema_validation_enabled": true,
    "kafka_broker_secrets_protection_enabled": "{{secrets_protection_enabled}}",
    "kafka_broker_secrets_protection_encrypt_passwords": "{{kafka_broker_secrets_protection_enabled}}",
    "kafka_broker_secrets_protection_encrypt_properties": [],
    "kafka_broker_service_environment_overrides": {
        "KAFKA_HEAP_OPTS": "-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
    },
    "kafka_broker_service_name": "{{ 'confluent-server' if confluent_server_enabled|bool else 'confluent-kafka'}}",
    "kafka_broker_telemetry_ansible_labels_enabled": "{{kafka_broker_telemetry_enabled}}",
    "kafka_broker_telemetry_enabled": "{{telemetry_enabled}}",
    "kafka_broker_truststore_path": "/var/ssl/private/kafka_broker.truststore.jks",
    "kafka_broker_truststore_storepass": "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "kafka_broker_user": "{{kafka_broker_default_user}}",
    "kafka_connect": {
        "appender_log_path": "{{kafka_connect_default_log_dir}}",
        "config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/connect-distributed.properties",
        "log4j_file": "{% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}{% endif %}/etc/kafka/connect-log4j.properties",
        "properties": {},
        "server_start_file": "{{ binary_base_path }}/bin/connect-distributed",
        "systemd_file": "/usr/lib/systemd/system/{{kafka_connect_service_name}}.service",
        "systemd_override": "/etc/systemd/system/{{kafka_connect_service_name}}.service.d/override.conf"
    },
    "kafka_connect_additional_system_admins": "{{rbac_component_additional_system_admins}}",
    "kafka_connect_ca_cert_path": "/var/ssl/private/ca.crt",
    "kafka_connect_cert_path": "/var/ssl/private/kafka_connect.crt",
    "kafka_connect_cluster_name": "",
    "kafka_connect_combined_properties": "{{kafka_connect_properties | combine_properties}}",
    "kafka_connect_confluent_hub_plugins": [],
    "kafka_connect_confluent_hub_plugins_dest": "/usr/share/java",
    "kafka_connect_copy_files": [],
    "kafka_connect_custom_properties": "{{ kafka_connect.properties }}",
    "kafka_connect_custom_rest_extension_classes": [],
    "kafka_connect_default_group": "confluent",
    "kafka_connect_default_internal_replication_factor": "{{ [ groups['kafka_broker'] | default(['localhost']) | length, default_internal_replication_factor ] | min }}",
    "kafka_connect_default_log_dir": "/var/log/kafka",
    "kafka_connect_default_user": "cp-kafka-connect",
    "kafka_connect_deployment_strategy": "{{deployment_strategy}}",
    "kafka_connect_export_certs": "{{kafka_connect_ssl_mutual_auth_enabled}}",
    "kafka_connect_final_properties": "{{ kafka_connect_combined_properties | combine(kafka_connect_custom_properties) }}",
    "kafka_connect_final_rest_extension_classes": "{{(kafka_connect_rest_extension_classes|difference(['']) + kafka_connect_custom_rest_extension_classes) | unique}}",
    "kafka_connect_group": "{{kafka_connect_default_group}}",
    "kafka_connect_group_id": "connect-cluster",
    "kafka_connect_health_check_password": "{{kafka_connect_ldap_password}}",
    "kafka_connect_health_check_user": "{{kafka_connect_ldap_user}}",
    "kafka_connect_health_checks_enabled": "{{health_checks_enabled}}",
    "kafka_connect_http_protocol": "{{ 'https' if kafka_connect_ssl_enabled|bool else 'http' }}",
    "kafka_connect_jmxexporter_config_path": "/opt/prometheus/kafka_connect.yml",
    "kafka_connect_jmxexporter_enabled": "{{jmxexporter_enabled}}",
    "kafka_connect_jmxexporter_port": 8077,
    "kafka_connect_jolokia_auth_mode": "{{jolokia_auth_mode}}",
    "kafka_connect_jolokia_config": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/kafka_connect_jolokia.properties",
    "kafka_connect_jolokia_enabled": "{{jolokia_enabled}}",
    "kafka_connect_jolokia_password": "{{jolokia_password}}",
    "kafka_connect_jolokia_port": 7773,
    "kafka_connect_jolokia_ssl_enabled": "{{ kafka_connect_ssl_enabled }}",
    "kafka_connect_jolokia_user": "{{jolokia_user}}",
    "kafka_connect_kafka_listener_name": "internal",
    "kafka_connect_key_path": "/var/ssl/private/kafka_connect.key",
    "kafka_connect_keystore_keypass": "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_connect_keystore_storepass }}",
    "kafka_connect_keystore_path": "/var/ssl/private/kafka_connect.keystore.jks",
    "kafka_connect_keystore_storepass": "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "kafka_connect_keytab_path": "/etc/security/keytabs/kafka_connect.keytab",
    "kafka_connect_ldap_password": "password",
    "kafka_connect_ldap_user": "connect",
    "kafka_connect_log_dir": "{{kafka_connect.appender_log_path}}",
    "kafka_connect_monitoring_interceptors_enabled": "{{ monitoring_interceptors_enabled }}",
    "kafka_connect_packages": [
        "confluent-common",
        "confluent-rest-utils",
        "confluent-metadata-service",
        "confluent-ce-kafka-http-server",
        "confluent-kafka-rest",
        "confluent-server-rest",
        "confluent-telemetry",
        "{{ kafka_broker_main_package }}",
        "confluent-hub-client",
        "confluent-kafka-connect-replicator",
        "confluent-security",
        "confluent-rebalancer",
        "confluent-control-center-fe",
        "confluent-control-center",
        "confluent-schema-registry"
    ],
    "kafka_connect_pause_rolling_deployment": "{{pause_rolling_deployment}}",
    "kafka_connect_plugins": [],
    "kafka_connect_plugins_dest": "/usr/share/java",
    "kafka_connect_plugins_path": [
        "/usr/share/java"
    ],
    "kafka_connect_plugins_remote": [],
    "kafka_connect_properties": {
        "consumer": {
            "enabled": true,
            "properties": "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'consumer.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass, rbac_enabled, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password, kerberos_kafka_broker_primary, kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'), false, kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "consumer_monitoring_interceptor_client": {
            "enabled": "{{ kafka_connect_monitoring_interceptors_enabled|bool }}",
            "properties": "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'consumer.confluent.monitoring.interceptor.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass, false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password, kerberos_kafka_broker_primary, kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'), false, kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "defaults": {
            "enabled": true,
            "properties": {
                "bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}",
                "config.storage.replication.factor": "{{ kafka_connect_default_internal_replication_factor }}",
                "config.storage.topic": "{{kafka_connect_group_id}}-configs",
                "confluent.license.topic": "_confluent-command",
                "connector.client.config.override.policy": "All",
                "consumer.bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}",
                "group.id": "{{kafka_connect_group_id}}",
                "internal.key.converter": "org.apache.kafka.connect.json.JsonConverter",
                "internal.key.converter.schemas.enable": "false",
                "internal.value.converter": "org.apache.kafka.connect.json.JsonConverter",
                "internal.value.converter.schemas.enable": "false",
                "key.converter": "io.confluent.connect.avro.AvroConverter",
                "listeners": "{{kafka_connect_http_protocol}}://0.0.0.0:{{kafka_connect_rest_port}}",
                "offset.flush.interval.ms": 10000,
                "offset.storage.replication.factor": "{{ kafka_connect_default_internal_replication_factor }}",
                "offset.storage.topic": "{{kafka_connect_group_id}}-offsets",
                "plugin.path": "{{(kafka_connect_plugins_path + [kafka_connect_confluent_hub_plugins_dest, kafka_connect_plugins_dest]) | unique | join(',')}}",
                "producer.bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}",
                "rest.advertised.host.name": "{{ hostvars[inventory_hostname]|resolve_hostname }}",
                "rest.advertised.listener": "{{kafka_connect_http_protocol}}",
                "rest.advertised.port": "{{kafka_connect_rest_port}}",
                "rest.port": "{{kafka_connect_rest_port}}",
                "status.storage.replication.factor": "{{ kafka_connect_default_internal_replication_factor }}",
                "status.storage.topic": "{{kafka_connect_group_id}}-status",
                "value.converter": "io.confluent.connect.avro.AvroConverter"
            }
        },
        "kafka_client": {
            "enabled": true,
            "properties": "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, '', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass, false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password, kerberos_kafka_broker_primary, kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'), false, kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "monitoring_interceptor": {
            "enabled": "{{ kafka_connect_monitoring_interceptors_enabled|bool }}",
            "properties": {
                "confluent.monitoring.interceptor.topic": "_confluent-monitoring",
                "consumer.confluent.monitoring.interceptor.bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}",
                "consumer.interceptor.classes": "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor",
                "producer.confluent.monitoring.interceptor.bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}",
                "producer.interceptor.classes": "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
            }
        },
        "mtls": {
            "enabled": "{{ kafka_connect_ssl_mutual_auth_enabled }}",
            "properties": {
                "listeners.https.ssl.client.auth": "true"
            }
        },
        "producer": {
            "enabled": true,
            "properties": "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'producer.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass, rbac_enabled, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password, kerberos_kafka_broker_primary, kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'), false, kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "producer_monitoring_interceptor_client": {
            "enabled": "{{ kafka_connect_monitoring_interceptors_enabled|bool }}",
            "properties": "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'producer.confluent.monitoring.interceptor.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass, false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password, kerberos_kafka_broker_primary, kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'), false, kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "rbac": {
            "enabled": "{{rbac_enabled}}",
            "properties": {
                "confluent.metadata.basic.auth.user.info": "{{kafka_connect_ldap_user| default('MISSING')}}:{{kafka_connect_ldap_password| default('MISSING')}}",
                "confluent.metadata.bootstrap.server.urls": "{{mds_bootstrap_server_urls}}",
                "confluent.metadata.http.auth.credentials.provider": "BASIC",
                "public.key.path": "{{rbac_enabled_public_pem_path}}",
                "rest.servlet.initializor.classes": "io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler"
            }
        },
        "rbac_external_client": {
            "enabled": "{{rbac_enabled and external_mds_enabled and mds_tls_enabled  }}",
            "properties": {
                "config.providers.secret.param.kafkastore.ssl.truststore.location": "{{kafka_connect_truststore_path}}",
                "config.providers.secret.param.kafkastore.ssl.truststore.password": "{{kafka_connect_truststore_storepass}}",
                "consumer.ssl.truststore.location": "{{kafka_connect_truststore_path}}",
                "consumer.ssl.truststore.password": "{{kafka_connect_truststore_storepass}}",
                "producer.ssl.truststore.location": "{{kafka_connect_truststore_path}}",
                "producer.ssl.truststore.password": "{{kafka_connect_truststore_storepass}}",
                "ssl.truststore.location": "{{kafka_connect_truststore_path}}",
                "ssl.truststore.password": "{{kafka_connect_truststore_storepass}}"
            }
        },
        "rest_classes": {
            "enabled": "{{ kafka_connect_final_rest_extension_classes|length > 0 }}",
            "properties": {
                "rest.extension.classes": "{{ kafka_connect_final_rest_extension_classes | join(',') }}"
            }
        },
        "secret_registry": {
            "enabled": "{{kafka_connect_secret_registry_enabled}}",
            "properties": {
                "config.providers": "secret",
                "config.providers.secret.class": "io.confluent.connect.secretregistry.rbac.config.provider.InternalSecretConfigProvider",
                "config.providers.secret.param.kafkastore.bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}",
                "config.providers.secret.param.kafkastore.topic": "_confluent-secrets",
                "config.providers.secret.param.kafkastore.topic.replication.factor": "{{kafka_connect_secret_registry_default_replication_factor}}",
                "config.providers.secret.param.master.encryption.key": "{{kafka_connect_secret_registry_key}}",
                "config.providers.secret.param.secret.registry.group.id": "secret-registry"
            }
        },
        "secret_registry_client": {
            "enabled": true,
            "properties": "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'config.providers.secret.param.kafkastore.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass, false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password, kerberos_kafka_broker_primary, kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'), false, kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "sr": {
            "enabled": "{{ 'schema_registry' in groups }}",
            "properties": {
                "key.converter.schema.registry.url": "{{schema_registry_url}}",
                "value.converter.schema.registry.url": "{{schema_registry_url}}"
            }
        },
        "sr_ssl": {
            "enabled": "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}",
            "properties": {
                "key.converter.schema.registry.ssl.key.password": "{{kafka_connect_keystore_keypass}}",
                "key.converter.schema.registry.ssl.keystore.location": "{{kafka_connect_keystore_path}}",
                "key.converter.schema.registry.ssl.keystore.password": "{{kafka_connect_keystore_storepass}}",
                "key.converter.schema.registry.ssl.truststore.location": "{{kafka_connect_truststore_path}}",
                "key.converter.schema.registry.ssl.truststore.password": "{{kafka_connect_truststore_storepass}}",
                "value.converter.schema.registry.ssl.key.password": "{{kafka_connect_keystore_keypass}}",
                "value.converter.schema.registry.ssl.keystore.location": "{{kafka_connect_keystore_path}}",
                "value.converter.schema.registry.ssl.keystore.password": "{{kafka_connect_keystore_storepass}}",
                "value.converter.schema.registry.ssl.truststore.location": "{{kafka_connect_truststore_path}}",
                "value.converter.schema.registry.ssl.truststore.password": "{{kafka_connect_truststore_storepass}}"
            }
        },
        "ssl": {
            "enabled": "{{kafka_connect_ssl_enabled}}",
            "properties": {
                "listeners.https.ssl.key.password": "{{kafka_connect_keystore_keypass}}",
                "listeners.https.ssl.keystore.location": "{{kafka_connect_keystore_path}}",
                "listeners.https.ssl.keystore.password": "{{kafka_connect_keystore_storepass}}",
                "listeners.https.ssl.truststore.location": "{{kafka_connect_truststore_path}}",
                "listeners.https.ssl.truststore.password": "{{kafka_connect_truststore_storepass}}"
            }
        },
        "telemetry": {
            "enabled": "{{kafka_connect_telemetry_enabled}}",
            "properties": {
                "confluent.telemetry.api.key": "{{telemetry_api_key}}",
                "confluent.telemetry.api.secret": "{{telemetry_api_secret}}",
                "confluent.telemetry.enabled": "true",
                "metric.reporters": "io.confluent.telemetry.reporter.TelemetryReporter"
            }
        },
        "telemetry_labels": {
            "enabled": "{{kafka_connect_telemetry_ansible_labels_enabled}}",
            "properties": {
                "confluent.telemetry.labels.confluent.ansible.playbooks.version": "{{confluent_ansible_branch}}"
            }
        },
        "telemetry_proxy": {
            "enabled": "{{kafka_connect_telemetry_enabled and telemetry_proxy_url != ''}}",
            "properties": {
                "confluent.telemetry.proxy.url": "{{telemetry_proxy_url}}"
            }
        },
        "telemetry_proxy_auth": {
            "enabled": "{{kafka_connect_telemetry_enabled and telemetry_proxy_username != ''}}",
            "properties": {
                "confluent.telemetry.proxy.password": "{{telemetry_proxy_password}}",
                "confluent.telemetry.proxy.username": "{{telemetry_proxy_username}}"
            }
        }
    },
    "kafka_connect_replicator": {
        "consumer_config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka-connect-replicator/kafka-connect-replicator-consumer.properties",
        "interceptors_config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka-connect-replicator/kafka-connect-replicator-interceptors.properties",
        "log4j_file": "{% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}{% endif %}/etc/kafka-connect-replicator/replicator-log4j.properties",
        "producer_config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka-connect-replicator/kafka-connect-replicator-producer.properties",
        "replication_config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka-connect-replicator/kafka-connect-replicator.properties",
        "server_start_file": "{{ binary_base_path }}/bin/kafka-connect-replicator-start",
        "systemd_file": "/lib/systemd/system/{{kafka_connect_replicator_service_name}}.service",
        "systemd_override": "/etc/systemd/system/{{kafka_connect_replicator_service_name}}.service.d/override.conf"
    },
    "kafka_connect_replicator_bootstrap_servers": "localhost:9092",
    "kafka_connect_replicator_ca_cert_path": "/var/ssl/private/kafka_connect_replicator_ca.crt",
    "kafka_connect_replicator_cert_path": "/var/ssl/private/kafka_connect_replicator.crt",
    "kafka_connect_replicator_cluster_id": "replicator",
    "kafka_connect_replicator_combined_properties": "{{kafka_connect_replicator_properties | combine_properties}}",
    "kafka_connect_replicator_consumer_bootstrap_servers": "localhost:9092",
    "kafka_connect_replicator_consumer_ca_cert_path": "/var/ssl/private/kafka_connect_replicator_consumer_ca.crt",
    "kafka_connect_replicator_consumer_cert_path": "/var/ssl/private/kafka_connect_replicator_consumer.crt",
    "kafka_connect_replicator_consumer_combined_properties": "{{kafka_connect_replicator_consumer_properties | combine_properties}}",
    "kafka_connect_replicator_consumer_custom_properties": {},
    "kafka_connect_replicator_consumer_export_certs": "kafka_connect_replicator_consumer_listener ['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool",
    "kafka_connect_replicator_consumer_final_properties": "{{kafka_connect_replicator_consumer_combined_properties | combine(kafka_connect_replicator_consumer_custom_properties)}}",
    "kafka_connect_replicator_consumer_kerberos_keytab_path": "/etc/security/keytabs/kafka_connect_replicator_consumer.keytab",
    "kafka_connect_replicator_consumer_key_path": "/var/ssl/private/kafka_connect_replicator_consumer.key",
    "kafka_connect_replicator_consumer_keystore_keypass": "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_connect_replicator_consumer_keystore_storepass }}",
    "kafka_connect_replicator_consumer_keystore_path": "/var/ssl/private/kafka_connect_replicator_consumer.keystore.jks",
    "kafka_connect_replicator_consumer_keystore_storepass": "{{ ssl_keystore_store_password if kafka_connect_replicator_consumer_ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "kafka_connect_replicator_consumer_keytab_path": "/etc/security/keytabs/kafka_connect_replicator_consumer.keytab",
    "kafka_connect_replicator_consumer_properties": {
        "defaults": {
            "enabled": true,
            "properties": {
                "bootstrap.servers": "{{kafka_connect_replicator_consumer_bootstrap_servers}}"
            }
        },
        "kafka_client": {
            "enabled": true,
            "properties": "{{ kafka_connect_replicator_consumer_listener | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, '', kafka_connect_replicator_truststore_path, kafka_connect_replicator_truststore_storepass, kafka_connect_replicator_keystore_path, kafka_connect_replicator_keystore_storepass, kafka_connect_replicator_keystore_keypass, false, kafka_connect_replicator_consumer_sasl_plain_principal, kafka_connect_replicator_consumer_sasl_plain_password, kafka_connect_replicator_consumer_sasl_scram_principal, kafka_connect_replicator_consumer_sasl_scram_password, kerberos_kafka_broker_primary, kafka_connect_replicator_keytab_path, kafka_connect_replicator_kerberos_principal|default('kafka'), false, kafka_connect_replicator_ldap_user, kafka_connect_replicator_ldap_password, mds_bootstrap_server_urls) }}"
        }
    },
    "kafka_connect_replicator_consumer_sasl_plain_password": "{{ sasl_plain_users.kafka_connect_replicator.password }}",
    "kafka_connect_replicator_consumer_sasl_plain_principal": "{{ sasl_plain_users.kafka_connect_replicator.principal }}",
    "kafka_connect_replicator_consumer_sasl_scram_password": "{{ sasl_scram_users.kafka_connect_replicator.password }}",
    "kafka_connect_replicator_consumer_sasl_scram_principal": "{{ sasl_scram_users.kafka_connect_replicator.principal }}",
    "kafka_connect_replicator_consumer_ssl_ca_cert_path": "{{kafka_connect_replicator_ssl_ca_cert_path}}",
    "kafka_connect_replicator_consumer_ssl_cert_path": "{{kafka_connect_replicator_ssl_cert_path}}",
    "kafka_connect_replicator_consumer_ssl_key_password": "{{kafka_connect_replicator_ssl_key_password}}",
    "kafka_connect_replicator_consumer_ssl_key_path": "{{kafka_connect_replicator_ssl_key_path}}",
    "kafka_connect_replicator_consumer_ssl_keystore_file_path": "{{kafka_connect_replicator_consumer_ssl_keystore_file_path}}",
    "kafka_connect_replicator_consumer_ssl_provided_keystore_and_truststore": false,
    "kafka_connect_replicator_consumer_ssl_truststore_file_path": "{{kafka_connect_replicator_ssl_truststore_file_path}}",
    "kafka_connect_replicator_consumer_truststore_path": "/var/ssl/private/kafka_connect_replicator_consumer.truststore.jks",
    "kafka_connect_replicator_consumer_truststore_storepass": "{{ ssl_truststore_password if kafka_connect_replicator_consumer_ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "kafka_connect_replicator_copy_files": [],
    "kafka_connect_replicator_custom_properties": {},
    "kafka_connect_replicator_default_group": "confluent",
    "kafka_connect_replicator_default_user": "cp-kafka-connect-replicator",
    "kafka_connect_replicator_deployment_strategy": "{{deployment_strategy}}",
    "kafka_connect_replicator_export_certs": "kafka_connect_replicator_listener ['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool",
    "kafka_connect_replicator_final_properties": "{{kafka_connect_replicator_combined_properties | combine(kafka_connect_replicator_custom_properties)}}",
    "kafka_connect_replicator_group": "{{kafka_connect_replicator_default_group}}",
    "kafka_connect_replicator_health_check_password": "password",
    "kafka_connect_replicator_health_check_user": "connect",
    "kafka_connect_replicator_health_checks_enabled": true,
    "kafka_connect_replicator_http_protocol": "{% if kafka_connect_replicator_ssl_enabled | bool%}https{%else%}http{%endif%}",
    "kafka_connect_replicator_jolokia_auth_mode": "{{jolokia_auth_mode}}",
    "kafka_connect_replicator_jolokia_config": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka-connect-replicator/confluent-replicator-jolokia.properties",
    "kafka_connect_replicator_jolokia_enabled": "{{jolokia_enabled}}",
    "kafka_connect_replicator_jolokia_jar_path": "/opt/jolokia/jolokia.jar",
    "kafka_connect_replicator_jolokia_password": "{{jolokia_password}}",
    "kafka_connect_replicator_jolokia_port": 7777,
    "kafka_connect_replicator_jolokia_ssl_enabled": "{{ kafka_connect_replicator_ssl_enabled }}",
    "kafka_connect_replicator_jolokia_user": "{{jolokia_user}}",
    "kafka_connect_replicator_kerberos_keytab_path": "/etc/security/keytabs/kafka_connect_replicator.keytab",
    "kafka_connect_replicator_key_path": "/var/ssl/private/kafka_connect_replicator.key",
    "kafka_connect_replicator_keystore_keypass": "{{ ssl_keystore_key_password if kafka_connect_replicator_ssl_provided_keystore_and_truststore|bool else kafka_connect_replicator_keystore_storepass }}",
    "kafka_connect_replicator_keystore_path": "/var/ssl/private/kafka_connect_replicator.keystore.jks",
    "kafka_connect_replicator_keystore_storepass": "{{ ssl_keystore_store_password if kafka_connect_replicator_ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "kafka_connect_replicator_keytab_path": "/etc/security/keytabs/kafka_connect_replicator.keytab",
    "kafka_connect_replicator_listener_name": "kafka_connect_replicator_listener",
    "kafka_connect_replicator_log_dir": "/var/log/confluent/kafka-connect-replicator",
    "kafka_connect_replicator_log_file_size": "100mb",
    "kafka_connect_replicator_log_name": "kafka-connect-replicator.log",
    "kafka_connect_replicator_max_log_files": 10,
    "kafka_connect_replicator_monitoring_interceptor_bootstrap_servers": "localhost:9092",
    "kafka_connect_replicator_monitoring_interceptor_ca_cert_path": "/var/ssl/private/kafka_connect_replicator_monitoring_interceptor_ca.crt",
    "kafka_connect_replicator_monitoring_interceptor_cert_path": "/var/ssl/private/kafka_connect_replicator_monitoring_interceptor.crt",
    "kafka_connect_replicator_monitoring_interceptor_combined_properties": "{{kafka_connect_replicator_monitoring_interceptor_properties | combine_properties}}",
    "kafka_connect_replicator_monitoring_interceptor_custom_properties": {},
    "kafka_connect_replicator_monitoring_interceptor_export_certs": "kafka_connect_replicator_monitoring_interceptor_listener ['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool",
    "kafka_connect_replicator_monitoring_interceptor_final_properties": "{{kafka_connect_replicator_monitoring_interceptor_combined_properties | combine(kafka_connect_replicator_monitoring_interceptor_custom_properties)}}",
    "kafka_connect_replicator_monitoring_interceptor_kerberos_keytab_path": "{{ kafka_connect_replicator_monitoring_interceptor_kerberos_keytab_path }}",
    "kafka_connect_replicator_monitoring_interceptor_key_path": "/var/ssl/private/kafka_connect_replicator_monitoring_interceptor.key",
    "kafka_connect_replicator_monitoring_interceptor_keystore_keypass": "{{ ssl_keystore_key_password if kafka_connect_replicator_monitoring_interceptor_ssl_provided_keystore_and_truststore|bool else kafka_connect_replicator_monitoring_interceptor_keystore_storepass}}",
    "kafka_connect_replicator_monitoring_interceptor_keystore_path": "/var/ssl/private/kafka_connect_replicator_monitoring_interceptor.keystore.jks",
    "kafka_connect_replicator_monitoring_interceptor_keystore_storepass": "{{ ssl_keystore_store_password if kafka_connect_replicator_monitoring_interceptor_ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "kafka_connect_replicator_monitoring_interceptor_keytab_path": "/etc/security/keytabs/kafka_connect_replicator_monitoring_interceptor.keytab",
    "kafka_connect_replicator_monitoring_interceptor_properties": {
        "defaults": {
            "enabled": "{{kafka_connect_replicator_monitoring_interceptors_enabled|bool}}",
            "properties": {
                "confluent.monitoring.interceptor.topic": "_confluent-monitoring",
                "consumer.confluent.monitoring.interceptor.bootstrap.servers": "{{kafka_connect_replicator_monitoring_interceptor_bootstrap_servers}}",
                "consumer.interceptor.classes": "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor",
                "producer.confluent.monitoring.interceptor.bootstrap.servers": "{{kafka_connect_replicator_monitoring_interceptor_bootstrap_servers}}",
                "producer.interceptor.classes": "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
            }
        },
        "kafka_client": {
            "enabled": true,
            "properties": "{{ kafka_connect_replicator_monitoring_interceptor_listener | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, '', kafka_connect_replicator_truststore_path, kafka_connect_replicator_truststore_storepass, kafka_connect_replicator_keystore_path, kafka_connect_replicator_keystore_storepass, kafka_connect_replicator_keystore_keypass, false, kafka_connect_replicator_monitoring_interceptor_sasl_plain_principal, kafka_connect_replicator_monitoring_interceptor_sasl_plain_password, kafka_connect_replicator_monitoring_interceptor_sasl_scram_principal, kafka_connect_replicator_monitoring_interceptor_sasl_scram_password, kerberos_kafka_broker_primary, kafka_connect_replicator_keytab_path, kafka_connect_replicator_kerberos_principal|default('kafka'), false, kafka_connect_replicator_ldap_user, kafka_connect_replicator_ldap_password, mds_bootstrap_server_urls) }}"
        }
    },
    "kafka_connect_replicator_monitoring_interceptor_sasl_plain_password": "{{ sasl_plain_users.kafka_connect_replicator.password }}",
    "kafka_connect_replicator_monitoring_interceptor_sasl_plain_principal": "{{ sasl_plain_users.kafka_connect_replicator.principal }}",
    "kafka_connect_replicator_monitoring_interceptor_sasl_scram_password": "{{ sasl_scram_users.kafka_connect_replicator.password }}",
    "kafka_connect_replicator_monitoring_interceptor_sasl_scram_principal": "{{ sasl_scram_users.kafka_connect_replicator.principal}}",
    "kafka_connect_replicator_monitoring_interceptor_ssl_ca_cert_path": "{{kafka_connect_replicator_ssl_ca_cert_path}}",
    "kafka_connect_replicator_monitoring_interceptor_ssl_cert_path": "{{kafka_connect_replicator_ssl_cert_path}}",
    "kafka_connect_replicator_monitoring_interceptor_ssl_key_password": "{{kafka_connect_replicator_ssl_key_password}}",
    "kafka_connect_replicator_monitoring_interceptor_ssl_key_path": "{{kafka_connect_replicator_ssl_key_path}}",
    "kafka_connect_replicator_monitoring_interceptor_ssl_keystore_file_path": "{{kafka_connect_replicator_ssl_keystore_file_path}}",
    "kafka_connect_replicator_monitoring_interceptor_ssl_provided_keystore_and_truststore": false,
    "kafka_connect_replicator_monitoring_interceptor_ssl_truststore_file_path": "{{kafka_connect_replicator_ssl_truststore_file_path}}",
    "kafka_connect_replicator_monitoring_interceptor_truststore_path": "/var/ssl/private/kafka_connect_replicator_monitoring_interceptor.truststore.jks",
    "kafka_connect_replicator_monitoring_interceptor_truststore_storepass": "{{ ssl_truststore_password if kafka_connect_replicator_monitoring_interceptor_ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "kafka_connect_replicator_monitoring_interceptors_enabled": true,
    "kafka_connect_replicator_offset_start": "consumer",
    "kafka_connect_replicator_offsets_topic": "connect-offsets",
    "kafka_connect_replicator_packages": [
        "confluent-common",
        "confluent-rest-utils",
        "confluent-metadata-service",
        "confluent-ce-kafka-http-server",
        "confluent-kafka-rest",
        "confluent-server-rest",
        "confluent-telemetry",
        "{{ kafka_broker_main_package }}",
        "confluent-hub-client",
        "confluent-kafka-connect-replicator",
        "confluent-security",
        "confluent-rebalancer",
        "confluent-control-center-fe",
        "confluent-control-center",
        "confluent-schema-registry"
    ],
    "kafka_connect_replicator_pause_rolling_deployment": "{{pause_rolling_deployment}}",
    "kafka_connect_replicator_port": 8083,
    "kafka_connect_replicator_producer_bootstrap_servers": "localhost:9092",
    "kafka_connect_replicator_producer_ca_cert_path": "/var/ssl/private/kafka_connect_replicator_producer_ca.crt",
    "kafka_connect_replicator_producer_cert_path": "/var/ssl/private/kafka_connect_replicator_producer.crt",
    "kafka_connect_replicator_producer_combined_properties": "{{kafka_connect_replicator_producer_properties | combine_properties}}",
    "kafka_connect_replicator_producer_custom_properties": {},
    "kafka_connect_replicator_producer_export_certs": "kafka_connect_replicator_producer_listener ['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool",
    "kafka_connect_replicator_producer_final_properties": "{{kafka_connect_replicator_producer_combined_properties | combine(kafka_connect_replicator_producer_custom_properties)}}",
    "kafka_connect_replicator_producer_kerberos_keytab_path": "/etc/security/keytabs/kafka_connect_replicator_producer.keytab",
    "kafka_connect_replicator_producer_key_path": "/var/ssl/private/kafka_connect_replicator_producer.key",
    "kafka_connect_replicator_producer_keystore_keypass": "{{ ssl_keystore_key_password if kafka_connect_replicator_producer_ssl_provided_keystore_and_truststore|bool else kafka_connect_replicator_producer_keystore_storepass }}",
    "kafka_connect_replicator_producer_keystore_path": "/var/ssl/private/kafka_connect_replicator_producer.keystore.jks",
    "kafka_connect_replicator_producer_keystore_storepass": "{{ ssl_keystore_store_password if kafka_connect_replicator_producer_ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "kafka_connect_replicator_producer_keytab_path": "/etc/security/keytabs/kafka_connect_replicator_producer.keytab",
    "kafka_connect_replicator_producer_properties": {
        "defaults": {
            "enabled": true,
            "properties": {
                "bootstrap.servers": "{{kafka_connect_replicator_producer_bootstrap_servers}}"
            }
        },
        "kafka_client": {
            "enabled": true,
            "properties": "{{ kafka_connect_replicator_producer_listener | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, '', kafka_connect_replicator_truststore_path, kafka_connect_replicator_truststore_storepass, kafka_connect_replicator_keystore_path, kafka_connect_replicator_keystore_storepass, kafka_connect_replicator_keystore_keypass, false, kafka_connect_replicator_producer_sasl_plain_principal, kafka_connect_replicator_producer_sasl_plain_password, kafka_connect_replicator_producer_sasl_scram_principal, kafka_connect_replicator_producer_sasl_scram_password, kerberos_kafka_broker_primary, kafka_connect_replicator_keytab_path, kafka_connect_replicator_kerberos_principal|default('kafka'), false, kafka_connect_replicator_ldap_user, kafka_connect_replicator_ldap_password, mds_bootstrap_server_urls) }}"
        }
    },
    "kafka_connect_replicator_producer_sasl_plain_password": "{{ sasl_plain_users.kafka_connect_replicator.password }}",
    "kafka_connect_replicator_producer_sasl_plain_principal": "{{ sasl_plain_users.kafka_connect_replicator.principal }}",
    "kafka_connect_replicator_producer_sasl_scram_password": "{{ sasl_scram_users.kafka_connect_replicator.password }}",
    "kafka_connect_replicator_producer_sasl_scram_principal": "{{ sasl_scram_users.kafka_connect_replicator.principal }}",
    "kafka_connect_replicator_producer_ssl_ca_cert_path": "{{kafka_connect_replicator_ssl_ca_cert_path}}",
    "kafka_connect_replicator_producer_ssl_cert_path": "{{kafka_connect_replicator_ssl_cert_path}}",
    "kafka_connect_replicator_producer_ssl_key_password": "{{kafka_connect_replicator_ssl_key_password}}",
    "kafka_connect_replicator_producer_ssl_key_path": "{{kafka_connect_replicator_ssl_key_path}}",
    "kafka_connect_replicator_producer_ssl_keystore_file_path": "{{kafka_connect_replicator_ssl_keystore_file_path}}",
    "kafka_connect_replicator_producer_ssl_provided_keystore_and_truststore": false,
    "kafka_connect_replicator_producer_ssl_truststore_file_path": "{{kafka_connect_replicator_ssl_truststore_file_path}}",
    "kafka_connect_replicator_producer_truststore_path": "/var/ssl/private/kafka_connect_replicator_producer.truststore.jks",
    "kafka_connect_replicator_producer_truststore_storepass": "{{ ssl_truststore_password if kafka_connect_replicator_producer_ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "kafka_connect_replicator_properties": {
        "defaults": {
            "enabled": true,
            "properties": {
                "config.storage.topic": "{{kafka_connect_replicator_storage_topic}}",
                "confluent.license.topic": "_confluent-command",
                "confluent.topic.bootstrap.servers": "{{kafka_connect_replicator_bootstrap_servers}}",
                "listeners": "{{kafka_connect_replicator_http_protocol}}://0.0.0.0:{{kafka_connect_replicator_port}}",
                "offset.start": "{{kafka_connect_replicator_offset_start}}",
                "offset.storage.topic": "{{kafka_connect_replicator_offsets_topic}}",
                "rest.advertised.host.name": "{{ hostvars[inventory_hostname]|resolve_hostname }}",
                "rest.advertised.listener": "{{kafka_connect_replicator_http_protocol}}",
                "rest.advertised.port": "{{kafka_connect_replicator_port}}",
                "status.storage.topic": "{{kafka_connect_replicator_status_topic}}",
                "topic.auto.create": "{{kafka_connect_replicator_topic_auto_create}}",
                "topic.whitelist": "{{kafka_connect_replicator_white_list}}"
            }
        },
        "kafka_client": {
            "enabled": true,
            "properties": "{{ kafka_connect_replicator_listener | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, '', kafka_connect_replicator_truststore_path, kafka_connect_replicator_truststore_storepass, kafka_connect_replicator_keystore_path, kafka_connect_replicator_keystore_storepass, kafka_connect_replicator_keystore_keypass, false, kafka_connect_replicator_sasl_plain_principal, kafka_connect_replicator_sasl_plain_password, kafka_connect_replicator_sasl_scram_principal, kafka_connect_replicator_sasl_scram_password, kerberos_kafka_broker_primary, kafka_connect_replicator_keytab_path, kafka_connect_replicator_kerberos_principal|default('kafka'), false, kafka_connect_replicator_ldap_user, kafka_connect_replicator_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "ssl": {
            "enabled": "{{kafka_connect_replicator_ssl_enabled}}",
            "properties": {
                "listeners.https.ssl.key.password": "{{kafka_connect_replicator_keystore_keypass}}",
                "listeners.https.ssl.keystore.location": "{{kafka_connect_replicator_keystore_path}}",
                "listeners.https.ssl.keystore.password": "{{kafka_connect_replicator_keystore_storepass}}",
                "listeners.https.ssl.truststore.location": "{{kafka_connect_replicator_truststore_path}}",
                "listeners.https.ssl.truststore.password": "{{kafka_connect_replicator_truststore_storepass}}"
            }
        }
    },
    "kafka_connect_replicator_sasl_plain_password": "{{ sasl_plain_users.kafka_connect_replicator.password }}",
    "kafka_connect_replicator_sasl_plain_principal": "{{ sasl_plain_users.kafka_connect_replicator.principal }}",
    "kafka_connect_replicator_sasl_scram_password": "{{ sasl_scram_users.kafka_connect_replicator.password }}",
    "kafka_connect_replicator_sasl_scram_principal": "{{ sasl_scram_users.kafka_connect_replicator.principal }}",
    "kafka_connect_replicator_service_name": "confluent-kafka-connect-replicator",
    "kafka_connect_replicator_ssl_ca_cert_path": "",
    "kafka_connect_replicator_ssl_cert_path": "",
    "kafka_connect_replicator_ssl_enabled": "{{ssl_enabled}}",
    "kafka_connect_replicator_ssl_key_password": "",
    "kafka_connect_replicator_ssl_key_path": "",
    "kafka_connect_replicator_ssl_keystore_file_path": "",
    "kafka_connect_replicator_ssl_mutual_auth_enabled": "{{ssl_mutual_auth_enabled}}",
    "kafka_connect_replicator_ssl_provided_keystore_and_truststore": false,
    "kafka_connect_replicator_ssl_truststore_file_path": "",
    "kafka_connect_replicator_status_topic": "connect-status",
    "kafka_connect_replicator_storage_topic": "connect-configs",
    "kafka_connect_replicator_topic_auto_create": true,
    "kafka_connect_replicator_truststore_path": "/var/ssl/private/kafka_connect_replicator.truststore.jks",
    "kafka_connect_replicator_truststore_storepass": "{{ ssl_truststore_password if kafka_connect_replicator_ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "kafka_connect_replicator_user": "{{kafka_connect_replicator_default_user}}",
    "kafka_connect_replicator_white_list": "",
    "kafka_connect_rest_extension_classes": [
        "{% if rbac_enabled|bool %}io.confluent.connect.security.ConnectSecurityExtension{% endif %}",
        "{% if kafka_connect_secret_registry_enabled|bool %}io.confluent.connect.secretregistry.ConnectSecretRegistryExtension{% endif %}"
    ],
    "kafka_connect_rest_port": 8083,
    "kafka_connect_secret_registry_default_replication_factor": "{{ [ groups['kafka_broker'] | default(['localhost']) | length, default_internal_replication_factor ] | min }}",
    "kafka_connect_secret_registry_enabled": "{{rbac_enabled}}",
    "kafka_connect_secret_registry_key": "39ff95832750c0090d84ddf5344583832efe91ef",
    "kafka_connect_secrets_protection_enabled": "{{secrets_protection_enabled}}",
    "kafka_connect_secrets_protection_encrypt_passwords": "{{kafka_connect_secrets_protection_enabled}}",
    "kafka_connect_secrets_protection_encrypt_properties": [],
    "kafka_connect_service_name": "confluent-kafka-connect",
    "kafka_connect_ssl_enabled": "{{ssl_enabled}}",
    "kafka_connect_ssl_mutual_auth_enabled": "{{ ssl_mutual_auth_enabled }}",
    "kafka_connect_telemetry_ansible_labels_enabled": "{{kafka_connect_telemetry_enabled}}",
    "kafka_connect_telemetry_enabled": "{{telemetry_enabled}}",
    "kafka_connect_truststore_path": "/var/ssl/private/kafka_connect.truststore.jks",
    "kafka_connect_truststore_storepass": "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "kafka_connect_user": "{{kafka_connect_default_user}}",
    "kafka_rest": {
        "appender_log_path": "{{kafka_rest_default_log_dir}}",
        "config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka-rest/kafka-rest.properties",
        "log4j_file": "{% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}{% endif %}/etc/kafka-rest/log4j.properties",
        "properties": {},
        "server_start_file": "{{ binary_base_path }}/bin/kafka-rest-start",
        "systemd_file": "/usr/lib/systemd/system/{{kafka_rest_service_name}}.service",
        "systemd_override": "/etc/systemd/system/{{kafka_rest_service_name}}.service.d/override.conf"
    },
    "kafka_rest_ca_cert_path": "/var/ssl/private/ca.crt",
    "kafka_rest_cert_path": "/var/ssl/private/kafka_rest.crt",
    "kafka_rest_combined_properties": "{{kafka_rest_properties | combine_properties}}",
    "kafka_rest_copy_files": [],
    "kafka_rest_custom_properties": "{{ kafka_rest.properties }}",
    "kafka_rest_default_group": "confluent",
    "kafka_rest_default_log_dir": "/var/log/confluent/kafka-rest",
    "kafka_rest_default_user": "cp-kafka-rest",
    "kafka_rest_deployment_strategy": "{{deployment_strategy}}",
    "kafka_rest_export_certs": "{{kafka_rest_ssl_mutual_auth_enabled}}",
    "kafka_rest_final_properties": "{{ kafka_rest_combined_properties | combine(kafka_rest_custom_properties) }}",
    "kafka_rest_group": "{{kafka_rest_default_group}}",
    "kafka_rest_health_check_password": "{{kafka_rest_ldap_password}}",
    "kafka_rest_health_check_user": "{{kafka_rest_ldap_user}}",
    "kafka_rest_health_checks_enabled": "{{health_checks_enabled}}",
    "kafka_rest_http_protocol": "{{ 'https' if kafka_rest_ssl_enabled|bool else 'http' }}",
    "kafka_rest_jmxexporter_config_path": "/opt/prometheus/kafka_rest.yml",
    "kafka_rest_jmxexporter_enabled": "{{jmxexporter_enabled}}",
    "kafka_rest_jmxexporter_port": 8075,
    "kafka_rest_jolokia_auth_mode": "{{jolokia_auth_mode}}",
    "kafka_rest_jolokia_config": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka-rest/kafka_rest_jolokia.properties",
    "kafka_rest_jolokia_enabled": "{{jolokia_enabled}}",
    "kafka_rest_jolokia_password": "{{jolokia_password}}",
    "kafka_rest_jolokia_port": 7775,
    "kafka_rest_jolokia_ssl_enabled": "{{ kafka_rest_ssl_enabled }}",
    "kafka_rest_jolokia_user": "{{jolokia_user}}",
    "kafka_rest_kafka_listener_name": "internal",
    "kafka_rest_key_path": "/var/ssl/private/kafka_rest.key",
    "kafka_rest_keystore_keypass": "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_rest_keystore_storepass }}",
    "kafka_rest_keystore_path": "/var/ssl/private/kafka_rest.keystore.jks",
    "kafka_rest_keystore_storepass": "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "kafka_rest_keytab_path": "/etc/security/keytabs/kafka_rest.keytab",
    "kafka_rest_ldap_password": "password",
    "kafka_rest_ldap_user": "kafka-rest",
    "kafka_rest_log_dir": "{{kafka_rest.appender_log_path}}",
    "kafka_rest_monitoring_interceptors_enabled": "{{ monitoring_interceptors_enabled }}",
    "kafka_rest_packages": [
        "confluent-common",
        "confluent-rest-utils",
        "confluent-metadata-service",
        "confluent-ce-kafka-http-server",
        "confluent-kafka-rest",
        "confluent-server-rest",
        "confluent-telemetry",
        "{{ kafka_broker_main_package }}",
        "confluent-security",
        "confluent-rebalancer",
        "confluent-control-center-fe",
        "confluent-control-center"
    ],
    "kafka_rest_pause_rolling_deployment": "{{pause_rolling_deployment}}",
    "kafka_rest_port": 8082,
    "kafka_rest_properties": {
        "defaults": {
            "enabled": true,
            "properties": {
                "bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']}}",
                "confluent.license.topic": "_confluent-license",
                "host.name": "{{ hostvars[inventory_hostname]|resolve_hostname }}",
                "listeners": "{{kafka_rest_http_protocol}}://0.0.0.0:{{kafka_rest_port}}"
            }
        },
        "id": {
            "enabled": "{{ inventory_hostname in groups.kafka_rest }}",
            "properties": {
                "id": "{{ groups.kafka_rest.index(inventory_hostname) + 1 if inventory_hostname in groups.kafka_rest else 0 }}"
            }
        },
        "kafka_client": {
            "enabled": true,
            "properties": "{{ kafka_broker_listeners[kafka_rest_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'client.', kafka_rest_truststore_path, kafka_rest_truststore_storepass, kafka_rest_keystore_path, kafka_rest_keystore_storepass, kafka_rest_keystore_keypass, false, sasl_plain_users.kafka_rest.principal, sasl_plain_users.kafka_rest.password, sasl_scram_users.kafka_rest.principal, sasl_scram_users.kafka_rest.password, kerberos_kafka_broker_primary, kafka_rest_keytab_path, kafka_rest_kerberos_principal|default('rp'), false, kafka_rest_ldap_user, kafka_rest_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "kafka_client_password_protection": {
            "enabled": "{{ kafka_rest_secrets_protection_enabled }}",
            "properties": {
                "client.config.providers": "securepass",
                "client.config.providers.securepass.class": "io.confluent.kafka.security.config.provider.SecurePassConfigProvider"
            }
        },
        "monitoring_interceptor": {
            "enabled": "{{ kafka_rest_monitoring_interceptors_enabled|bool }}",
            "properties": {
                "confluent.monitoring.interceptor.bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']}}",
                "confluent.monitoring.interceptor.topic": "_confluent-monitoring",
                "consumer.interceptor.classes": "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor",
                "producer.interceptor.classes": "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
            }
        },
        "monitoring_interceptor_client": {
            "enabled": "{{ kafka_rest_monitoring_interceptors_enabled|bool }}",
            "properties": "{{ kafka_broker_listeners[kafka_rest_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'client.confluent.monitoring.interceptor.', kafka_rest_truststore_path, kafka_rest_truststore_storepass, kafka_rest_keystore_path, kafka_rest_keystore_storepass, kafka_rest_keystore_keypass, false, sasl_plain_users.kafka_rest.principal, sasl_plain_users.kafka_rest.password, sasl_scram_users.kafka_rest.principal, sasl_scram_users.kafka_rest.password, kerberos_kafka_broker_primary, kafka_rest_keytab_path, kafka_rest_kerberos_principal|default('rp'), false, kafka_rest_ldap_user, kafka_rest_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "mtls": {
            "enabled": "{{ kafka_rest_ssl_mutual_auth_enabled }}",
            "properties": {
                "ssl.client.auth": "true"
            }
        },
        "rbac": {
            "enabled": "{{rbac_enabled}}",
            "properties": {
                "confluent.metadata.basic.auth.user.info": "{{kafka_rest_ldap_user | default('rest') }}:{{kafka_rest_ldap_password | default('pass')}}",
                "confluent.metadata.bootstrap.server.urls": "{{mds_bootstrap_server_urls}}",
                "confluent.metadata.http.auth.credentials.provider": "BASIC",
                "kafka.rest.resource.extension.class": "io.confluent.kafkarest.security.KafkaRestSecurityResourceExtension",
                "public.key.path": "{{rbac_enabled_public_pem_path}}",
                "rest.servlet.initializor.classes": "io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler"
            }
        },
        "rbac_external_client": {
            "enabled": "{{rbac_enabled and external_mds_enabled and mds_tls_enabled }}",
            "properties": {
                "client.ssl.truststore.location": "{{kafka_rest_truststore_path}}",
                "client.ssl.truststore.password": "{{kafka_rest_truststore_storepass}}",
                "ssl.truststore.location": "{{kafka_rest_truststore_path}}",
                "ssl.truststore.password": "{{kafka_rest_truststore_storepass}}"
            }
        },
        "sr": {
            "enabled": "{{ 'schema_registry' in groups }}",
            "properties": {
                "schema.registry.url": "{{schema_registry_url}}"
            }
        },
        "sr_ssl": {
            "enabled": "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}",
            "properties": {
                "schema.registry.ssl.key.password": "{{kafka_rest_keystore_keypass}}",
                "schema.registry.ssl.keystore.location": "{{kafka_rest_keystore_path}}",
                "schema.registry.ssl.keystore.password": "{{kafka_rest_keystore_storepass}}",
                "schema.registry.ssl.truststore.location": "{{kafka_rest_truststore_path}}",
                "schema.registry.ssl.truststore.password": "{{kafka_rest_truststore_storepass}}"
            }
        },
        "ssl": {
            "enabled": "{{kafka_rest_ssl_enabled}}",
            "properties": {
                "ssl.key.password": "{{kafka_rest_keystore_keypass}}",
                "ssl.keystore.location": "{{kafka_rest_keystore_path}}",
                "ssl.keystore.password": "{{kafka_rest_keystore_storepass}}"
            }
        },
        "telemetry": {
            "enabled": "{{kafka_rest_telemetry_enabled}}",
            "properties": {
                "confluent.telemetry.api.key": "{{telemetry_api_key}}",
                "confluent.telemetry.api.secret": "{{telemetry_api_secret}}",
                "confluent.telemetry.enabled": "true",
                "metric.reporters": "io.confluent.telemetry.reporter.TelemetryReporter"
            }
        },
        "telemetry_labels": {
            "enabled": "{{kafka_rest_telemetry_ansible_labels_enabled}}",
            "properties": {
                "confluent.telemetry.labels.confluent.ansible.playbooks.version": "{{confluent_ansible_branch}}"
            }
        },
        "telemetry_proxy": {
            "enabled": "{{kafka_rest_telemetry_enabled and telemetry_proxy_url != ''}}",
            "properties": {
                "confluent.telemetry.proxy.url": "{{telemetry_proxy_url}}"
            }
        },
        "telemetry_proxy_auth": {
            "enabled": "{{kafka_rest_telemetry_enabled and telemetry_proxy_username != ''}}",
            "properties": {
                "confluent.telemetry.proxy.password": "{{telemetry_proxy_password}}",
                "confluent.telemetry.proxy.username": "{{telemetry_proxy_username}}"
            }
        },
        "truststore": {
            "enabled": "{{kafka_rest_ssl_mutual_auth_enabled|bool or mds_tls_enabled|bool}}",
            "properties": {
                "ssl.truststore.location": "{{kafka_rest_truststore_path}}",
                "ssl.truststore.password": "{{kafka_rest_truststore_storepass}}"
            }
        }
    },
    "kafka_rest_secrets_protection_enabled": "{{secrets_protection_enabled}}",
    "kafka_rest_secrets_protection_encrypt_passwords": "{{kafka_rest_secrets_protection_enabled}}",
    "kafka_rest_secrets_protection_encrypt_properties": [],
    "kafka_rest_service_name": "confluent-kafka-rest",
    "kafka_rest_ssl_enabled": "{{ssl_enabled}}",
    "kafka_rest_ssl_mutual_auth_enabled": "{{ ssl_mutual_auth_enabled }}",
    "kafka_rest_telemetry_ansible_labels_enabled": "{{kafka_rest_telemetry_enabled}}",
    "kafka_rest_telemetry_enabled": "{{telemetry_enabled}}",
    "kafka_rest_truststore_path": "/var/ssl/private/kafka_rest.truststore.jks",
    "kafka_rest_truststore_storepass": "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "kafka_rest_user": "{{kafka_rest_default_user}}",
    "kerberos_configure": true,
    "kerberos_kafka_broker_primary": "{{ (hostvars[ groups['kafka_broker'][0] | default('kafka') ] | default({})) ['kafka_broker_kerberos_principal'] | default('kafka/host@EXAMPLE>COM') | regex_replace('/.*') }}",
    "ksql": {
        "appender_log_path": "{{ksql_default_log_dir}}",
        "config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}{{(confluent_package_version is version('5.5.0', '>=')) | ternary('/etc/ksqldb/ksql-server.properties' , '/etc/ksql/ksql-server.properties')}}",
        "jaas_file": "{{(confluent_package_version is version('5.5.0', '>=')) | ternary('/etc/ksqldb/ksql-server_jaas.conf' , '/etc/ksql/ksql-server_jaas.conf')}}",
        "log4j_file": "{% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}{% endif %}/etc/ksqldb/ksqldb-log4j.properties",
        "properties": {},
        "server_start_file": "{{ binary_base_path }}/bin/ksql-server-start",
        "systemd_file": "/usr/lib/systemd/system/{{ksql_service_name}}.service",
        "systemd_override": "/etc/systemd/system/{{ksql_service_name}}.service.d/override.conf"
    },
    "ksql_additional_system_admins": "{{rbac_component_additional_system_admins}}",
    "ksql_ca_cert_path": "/var/ssl/private/ca.crt",
    "ksql_cert_path": "/var/ssl/private/ksql.crt",
    "ksql_cluster_name": "",
    "ksql_combined_properties": "{{ksql_properties | combine_properties}}",
    "ksql_copy_files": [],
    "ksql_custom_properties": "{{ ksql.properties }}",
    "ksql_default_group": "confluent",
    "ksql_default_internal_replication_factor": "{{ [ groups['kafka_broker'] | default(['localhost']) | length, default_internal_replication_factor ] | min }}",
    "ksql_default_log_dir": "/var/log/confluent/ksql",
    "ksql_default_user": "cp-ksql",
    "ksql_deployment_strategy": "{{deployment_strategy}}",
    "ksql_export_certs": "{{ksql_ssl_mutual_auth_enabled}}",
    "ksql_final_properties": "{{ ksql_combined_properties | combine(ksql_custom_properties) }}",
    "ksql_group": "{{ksql_default_group}}",
    "ksql_health_check_password": "{{ksql_ldap_password}}",
    "ksql_health_check_user": "{{ksql_ldap_user}}",
    "ksql_health_checks_enabled": "{{health_checks_enabled}}",
    "ksql_http_protocol": "{{ 'https' if ksql_ssl_enabled|bool else 'http' }}",
    "ksql_jmxexporter_config_path": "/opt/prometheus/ksql.yml",
    "ksql_jmxexporter_enabled": "{{jmxexporter_enabled}}",
    "ksql_jmxexporter_port": 8076,
    "ksql_jolokia_auth_mode": "{{jolokia_auth_mode}}",
    "ksql_jolokia_config": "{{ archive_config_base_path if installation_method == 'archive' else '' }}{{(confluent_package_version is version('5.5.0', '>=')) | ternary('/etc/ksqldb/ksql_jolokia.properties' , '/etc/ksql/ksql_jolokia.properties')}}",
    "ksql_jolokia_enabled": "{{jolokia_enabled}}",
    "ksql_jolokia_password": "{{jolokia_password}}",
    "ksql_jolokia_port": 7774,
    "ksql_jolokia_ssl_enabled": "{{ ksql_ssl_enabled }}",
    "ksql_jolokia_user": "{{jolokia_user}}",
    "ksql_kafka_listener_name": "internal",
    "ksql_key_path": "/var/ssl/private/ksql.key",
    "ksql_keystore_keypass": "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else ksql_keystore_storepass }}",
    "ksql_keystore_path": "/var/ssl/private/ksql.keystore.jks",
    "ksql_keystore_storepass": "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "ksql_keytab_path": "/etc/security/keytabs/ksql.keytab",
    "ksql_ldap_password": "password",
    "ksql_ldap_user": "ksql",
    "ksql_listener_port": 8088,
    "ksql_log_dir": "{{ksql.appender_log_path}}",
    "ksql_log_streaming_enabled": false,
    "ksql_main_package": "{{(confluent_package_version is version('5.5.0', '>=')) | ternary('confluent-ksqldb' , 'confluent-ksql')}}",
    "ksql_monitoring_interceptors_enabled": "{{ monitoring_interceptors_enabled }}",
    "ksql_packages": [
        "confluent-common",
        "confluent-rest-utils",
        "confluent-metadata-service",
        "confluent-ce-kafka-http-server",
        "confluent-kafka-rest",
        "confluent-server-rest",
        "confluent-telemetry",
        "{{ kafka_broker_main_package }}",
        "{{ ksql_main_package }}",
        "confluent-security",
        "confluent-rebalancer",
        "confluent-control-center-fe",
        "confluent-control-center"
    ],
    "ksql_pause_rolling_deployment": "{{pause_rolling_deployment}}",
    "ksql_processing_log": "processing_log",
    "ksql_processing_log_kafka_listener_name": "{{kafka_broker_inter_broker_listener_name if rbac_enabled else ksql_kafka_listener_name}}",
    "ksql_properties": {
        "defaults": {
            "enabled": true,
            "properties": {
                "application.id": "ksql-server",
                "bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[ksql_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[ksql_kafka_listener_name]['port']}}",
                "ksql.internal.topic.replicas": "{{ ksql_default_internal_replication_factor }}",
                "ksql.service.id": "{{ ksql_service_id }}",
                "ksql.streams.num.standby.replicas": 1,
                "ksql.streams.producer.delivery.timeout.ms": 2147483647,
                "ksql.streams.producer.max.block.ms": 9223372036854775807,
                "ksql.streams.replication.factor": "{{ ksql_default_internal_replication_factor }}",
                "ksql.streams.state.dir": "/var/lib/kafka-streams",
                "listeners": "{{ksql_http_protocol}}://0.0.0.0:{{ksql_listener_port}}",
                "security.protocol": "{{kafka_broker_listeners[ksql_kafka_listener_name] | kafka_protocol_defaults(ssl_enabled, sasl_protocol) }}"
            }
        },
        "kafka_sasl_gssapi": {
            "enabled": "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' }}",
            "properties": {
                "sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true keyTab=\\"{{ksql_keytab_path}}\\" principal=\\"{{ksql_kerberos_principal | default('ksql')}}\\";",
                "sasl.kerberos.service.name": "{{kerberos_kafka_broker_primary}}",
                "sasl.mechanism": "GSSAPI"
            }
        },
        "kafka_sasl_oauth": {
            "enabled": "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'OAUTHBEARER' }}",
            "properties": {
                "sasl.jaas.config": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required username=\\"{{ksql_ldap_user | default('ksql')}}\\" password=\\"{{ksql_ldap_password | default('pass')}}\\" metadataServerUrls=\\"{{mds_bootstrap_server_urls}}\\";",
                "sasl.login.callback.handler.class": "io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler",
                "sasl.mechanism": "OAUTHBEARER"
            }
        },
        "kafka_sasl_plain": {
            "enabled": "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' }}",
            "properties": {
                "sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\\"{{sasl_plain_users.ksql.principal}}\\" password=\\"{{sasl_plain_users.ksql.password}}\\";",
                "sasl.mechanism": "PLAIN"
            }
        },
        "kafka_sasl_scram": {
            "enabled": "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-512' }}",
            "properties": {
                "sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\\"{{sasl_scram_users.ksql.principal}}\\" password=\\"{{sasl_scram_users.ksql.password}}\\";",
                "sasl.mechanism": "SCRAM-SHA-512"
            }
        },
        "log_streaming": {
            "enabled": "{{ksql_log_streaming_enabled}}",
            "properties": {
                "ksql.logging.processing.topic.auto.create": "{{ksql_log_streaming_enabled | lower}}",
                "ksql.logging.processing.topic.name": "{{ksql_service_id}}{{ksql_processing_log}}"
            }
        },
        "monitoring_interceptor": {
            "enabled": "{{ ksql_monitoring_interceptors_enabled|bool }}",
            "properties": {
                "confluent.monitoring.interceptor.bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[ksql_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[ksql_kafka_listener_name]['port']}}",
                "confluent.monitoring.interceptor.topic": "_confluent-monitoring",
                "consumer.interceptor.classes": "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor",
                "producer.interceptor.classes": "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
            }
        },
        "monitoring_interceptor_client": {
            "enabled": "{{ ksql_monitoring_interceptors_enabled|bool }}",
            "properties": "{{ kafka_broker_listeners[ksql_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'confluent.monitoring.interceptor.', ksql_truststore_path, ksql_truststore_storepass, ksql_keystore_path, ksql_keystore_storepass, ksql_keystore_keypass, false, sasl_plain_users.ksql.principal, sasl_plain_users.ksql.password, sasl_scram_users.ksql.principal, sasl_scram_users.ksql.password, kerberos_kafka_broker_primary, ksql_keytab_path, ksql_kerberos_principal|default('ksql'), false, ksql_ldap_user, ksql_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "mtls": {
            "enabled": "{{ ksql_ssl_mutual_auth_enabled }}",
            "properties": {
                "ssl.client.auth": "true"
            }
        },
        "pkcs12": {
            "enabled": "{{ pkcs12_enabled|bool }}",
            "properties": {
                "ssl.keymanager.algorithm": "PKIX",
                "ssl.keystore.type": "PKCS12",
                "ssl.trustmanager.algorithm": "PKIX",
                "ssl.truststore.type": "PKCS12"
            }
        },
        "rbac": {
            "enabled": "{{rbac_enabled}}",
            "properties": {
                "confluent.metadata.basic.auth.user.info": "{{ ksql_ldap_user | default('ksql') }}:{{ ksql_ldap_password | default('pass') }}",
                "confluent.metadata.bootstrap.server.urls": "{{mds_bootstrap_server_urls}}",
                "confluent.metadata.http.auth.credentials.provider": "BASIC",
                "ksql.authentication.plugin.class": "io.confluent.ksql.security.VertxBearerOrBasicAuthenticationPlugin",
                "ksql.security.extension.class": "io.confluent.ksql.security.KsqlConfluentSecurityExtension",
                "public.key.path": "{{rbac_enabled_public_pem_path}}"
            }
        },
        "rbac_external_client": {
            "enabled": "{{rbac_enabled and external_mds_enabled and mds_tls_enabled }}",
            "properties": {
                "ssl.truststore.location": "{{ksql_truststore_path}}",
                "ssl.truststore.password": "{{ksql_truststore_storepass}}"
            }
        },
        "sr": {
            "enabled": "{{ 'schema_registry' in groups }}",
            "properties": {
                "ksql.schema.registry.url": "{{schema_registry_url}}"
            }
        },
        "sr_rbac": {
            "enabled": "{{ 'schema_registry' in groups and rbac_enabled|bool }}",
            "properties": {
                "ksql.schema.registry.basic.auth.credentials.source": "USER_INFO",
                "ksql.schema.registry.basic.auth.user.info": "{{ ksql_ldap_user | default('ksql') }}:{{ ksql_ldap_password | default('pass') }}"
            }
        },
        "sr_ssl": {
            "enabled": "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}",
            "properties": {
                "ksql.schema.registry.ssl.key.password": "{{ksql_keystore_keypass}}",
                "ksql.schema.registry.ssl.keystore.location": "{{ksql_keystore_path}}",
                "ksql.schema.registry.ssl.keystore.password": "{{ksql_keystore_storepass}}",
                "ksql.schema.registry.ssl.truststore.location": "{{ksql_truststore_path}}",
                "ksql.schema.registry.ssl.truststore.password": "{{ksql_truststore_storepass}}"
            }
        },
        "ssl": {
            "enabled": "{{ kafka_broker_listeners[ksql_kafka_listener_name]['ssl_enabled']|default(ssl_enabled)|bool or ksql_ssl_enabled|bool }}",
            "properties": {
                "ssl.key.password": "{{ksql_keystore_keypass}}",
                "ssl.keystore.location": "{{ksql_keystore_path}}",
                "ssl.keystore.password": "{{ksql_keystore_storepass}}",
                "ssl.truststore.location": "{{ksql_truststore_path}}",
                "ssl.truststore.password": "{{ksql_truststore_storepass}}"
            }
        },
        "telemetry": {
            "enabled": "{{ksql_telemetry_enabled}}",
            "properties": {
                "confluent.telemetry.api.key": "{{telemetry_api_key}}",
                "confluent.telemetry.api.secret": "{{telemetry_api_secret}}",
                "confluent.telemetry.enabled": "true",
                "metric.reporters": "io.confluent.telemetry.reporter.TelemetryReporter"
            }
        },
        "telemetry_labels": {
            "enabled": "{{ksql_telemetry_ansible_labels_enabled}}",
            "properties": {
                "confluent.telemetry.labels.confluent.ansible.playbooks.version": "{{confluent_ansible_branch}}"
            }
        },
        "telemetry_proxy": {
            "enabled": "{{ksql_telemetry_enabled and telemetry_proxy_url != ''}}",
            "properties": {
                "confluent.telemetry.proxy.url": "{{telemetry_proxy_url}}"
            }
        },
        "telemetry_proxy_auth": {
            "enabled": "{{ksql_telemetry_enabled and telemetry_proxy_username != ''}}",
            "properties": {
                "confluent.telemetry.proxy.password": "{{telemetry_proxy_password}}",
                "confluent.telemetry.proxy.username": "{{telemetry_proxy_username}}"
            }
        }
    },
    "ksql_secrets_protection_enabled": "{{secrets_protection_enabled}}",
    "ksql_secrets_protection_encrypt_passwords": "{{ksql_secrets_protection_enabled}}",
    "ksql_secrets_protection_encrypt_properties": [],
    "ksql_service_id": "default_",
    "ksql_service_name": "{{(confluent_package_version is version('5.5.0', '>=')) | ternary('confluent-ksqldb' , 'confluent-ksql')}}",
    "ksql_ssl_enabled": "{{ssl_enabled}}",
    "ksql_ssl_mutual_auth_enabled": "{{ ssl_mutual_auth_enabled }}",
    "ksql_telemetry_ansible_labels_enabled": "{{ksql_telemetry_enabled}}",
    "ksql_telemetry_enabled": "{{telemetry_enabled}}",
    "ksql_truststore_path": "/var/ssl/private/ksql.truststore.jks",
    "ksql_truststore_storepass": "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "ksql_user": "{{ksql_default_user}}",
    "mds_acls_enabled": "{{rbac_enabled}}",
    "mds_bootstrap_server_urls": "{{mds_http_protocol}}://{{ groups['kafka_broker'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + mds_port|string + ',' + mds_http_protocol + '://') }}:{{mds_port}}",
    "mds_broker_bootstrap_servers": "localhost:9092",
    "mds_broker_listener": {
        "sasl_protocol": "{{sasl_protocol}}",
        "ssl_enabled": "{{ssl_enabled}}",
        "ssl_mutual_auth_enabled": "{{ssl_mutual_auth_enabled}}"
    },
    "mds_health_check_password": "{{mds_super_user_password}}",
    "mds_health_check_user": "{{mds_super_user}}",
    "mds_http_protocol": "{{ 'https' if kafka_broker_rest_ssl_enabled|bool else 'http' }}",
    "mds_port": 8090,
    "mds_ssl_enabled": "{{ssl_enabled}}",
    "mds_super_user": "mds",
    "mds_super_user_password": "password",
    "mds_tls_enabled": "{{true if 'https' in mds_bootstrap_server_urls else false}}",
    "monitoring_interceptors_enabled": "{{ 'control_center' in groups }}",
    "msg": "Module Variables (\\"vars\\"):\\n--------------------------------\\n{{ vars | to_nice_json }}\\n",
    "omit": "__omit_place_holder__de70e29cc600097be47ea323514bc65ea2711b0c",
    "open_file_limit": 500000,
    "pause_rolling_deployment": false,
    "pkcs12_enabled": "{{ true if fips_enabled|bool else false }}",
    "plain_jaas_config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\\"{{sasl_plain_users.admin.principal}}\\" password=\\"{{sasl_plain_users.admin.password}}\\" {% for user in sasl_plain_users|dict2items %} user_{{ user['value']['principal'] }}=\\"{{ user['value']['password'] }}\\"{% endfor %};",
    "play_hosts": [
        "kfk01",
        "kfk02.main.nikoleta.aws.ps.confluent.io",
        "kfk03.main.nikoleta.aws.ps.confluent.io"
    ],
    "playbook_dir": "/Users/nikoleta/workspace/personal/cp-ansible-sandbox/examples/security.plaintext",
    "proxy_env": {},
    "rbac_component_additional_system_admins": [],
    "rbac_enabled": false,
    "rbac_enabled_private_pem_path": "/var/ssl/private/tokenKeypair.pem",
    "rbac_enabled_public_pem_path": "/var/ssl/private/public.pem",
    "regenerate_ca": false,
    "regenerate_keystore_and_truststore": "{{regenerate_ca}}",
    "role_names": [
        "confluent.variables"
    ],
    "sasl_plain_users": {
        "admin": {
            "password": "admin-secret",
            "principal": "admin"
        },
        "client": {
            "password": "client-secret",
            "principal": "client"
        },
        "control_center": {
            "password": "control_center-secret",
            "principal": "control_center"
        },
        "kafka_connect": {
            "password": "kafka_connect-secret",
            "principal": "kafka_connect"
        },
        "kafka_connect_replicator": {
            "password": "kafka_connect_replicator-secret",
            "principal": "kafka_connect_replicator"
        },
        "kafka_rest": {
            "password": "kafka_rest-secret",
            "principal": "kafka_rest"
        },
        "ksql": {
            "password": "ksql-secret",
            "principal": "ksql"
        },
        "schema_registry": {
            "password": "schema_registry-secret",
            "principal": "schema_registry"
        }
    },
    "sasl_protocol": "none",
    "sasl_scram_users": {
        "admin": {
            "password": "admin-secret",
            "principal": "admin"
        },
        "client": {
            "password": "client-secret",
            "principal": "client"
        },
        "control_center": {
            "password": "control_center-secret",
            "principal": "control_center"
        },
        "kafka_connect": {
            "password": "kafka_connect-secret",
            "principal": "kafka_connect"
        },
        "kafka_connect_replicator": {
            "password": "kafka_connect_replicator-secret",
            "principal": "kafka_connect_replicator"
        },
        "kafka_rest": {
            "password": "kafka_rest-secret",
            "principal": "kafka_rest"
        },
        "ksql": {
            "password": "ksql-secret",
            "principal": "ksql"
        },
        "schema_registry": {
            "password": "schema_registry-secret",
            "principal": "schema_registry"
        }
    },
    "schema_registry": {
        "appender_log_path": "{{schema_registry_default_log_dir}}",
        "config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/schema-registry/schema-registry.properties",
        "log4j_file": "{% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}{% endif %}/etc/schema-registry/log4j.properties",
        "properties": {},
        "server_start_file": "{{ binary_base_path }}/bin/schema-registry-start",
        "systemd_file": "/usr/lib/systemd/system/{{schema_registry_service_name}}.service",
        "systemd_override": "/etc/systemd/system/{{schema_registry_service_name}}.service.d/override.conf"
    },
    "schema_registry_additional_system_admins": "{{rbac_component_additional_system_admins}}",
    "schema_registry_ca_cert_path": "/var/ssl/private/ca.crt",
    "schema_registry_cert_path": "/var/ssl/private/schema_registry.crt",
    "schema_registry_cluster_name": "",
    "schema_registry_combined_properties": "{{schema_registry_properties | combine_properties}}",
    "schema_registry_copy_files": [],
    "schema_registry_custom_properties": {},
    "schema_registry_default_group": "confluent",
    "schema_registry_default_internal_replication_factor": "{{ [ groups['kafka_broker'] | default(['localhost']) | length, default_internal_replication_factor ] | min }}",
    "schema_registry_default_log_dir": "/var/log/confluent/schema-registry",
    "schema_registry_default_user": "cp-schema-registry",
    "schema_registry_export_certs": "{{schema_registry_ssl_mutual_auth_enabled}}",
    "schema_registry_final_properties": "{{ schema_registry_combined_properties | combine(schema_registry_custom_properties) }}",
    "schema_registry_group": "{{schema_registry_default_group}}",
    "schema_registry_health_check_password": "{{schema_registry_ldap_password}}",
    "schema_registry_health_check_user": "{{schema_registry_ldap_user}}",
    "schema_registry_health_checks_enabled": "{{health_checks_enabled}}",
    "schema_registry_http_protocol": "{{ 'https' if schema_registry_ssl_enabled|bool else 'http' }}",
    "schema_registry_jmxexporter_config_path": "/opt/prometheus/schema_registry.yml",
    "schema_registry_jmxexporter_enabled": "{{jmxexporter_enabled}}",
    "schema_registry_jmxexporter_port": 8078,
    "schema_registry_jolokia_auth_mode": "{{jolokia_auth_mode}}",
    "schema_registry_jolokia_config": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/schema-registry/schema_registry_jolokia.properties",
    "schema_registry_jolokia_enabled": "{{jolokia_enabled}}",
    "schema_registry_jolokia_password": "{{jolokia_password}}",
    "schema_registry_jolokia_port": 7772,
    "schema_registry_jolokia_ssl_enabled": "{{ schema_registry_ssl_enabled }}",
    "schema_registry_jolokia_user": "{{jolokia_user}}",
    "schema_registry_kafka_listener_name": "internal",
    "schema_registry_key_path": "/var/ssl/private/schema_registry.key",
    "schema_registry_keystore_keypass": "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else schema_registry_keystore_storepass }}",
    "schema_registry_keystore_path": "/var/ssl/private/schema_registry.keystore.jks",
    "schema_registry_keystore_storepass": "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "schema_registry_keytab_path": "/etc/security/keytabs/schema_registry.keytab",
    "schema_registry_ldap_password": "password",
    "schema_registry_ldap_user": "schema-registry",
    "schema_registry_listener_port": 8081,
    "schema_registry_log_dir": "{{schema_registry.appender_log_path}}",
    "schema_registry_packages": [
        "confluent-common",
        "confluent-rest-utils",
        "confluent-metadata-service",
        "confluent-ce-kafka-http-server",
        "confluent-kafka-rest",
        "confluent-server-rest",
        "confluent-telemetry",
        "{{ kafka_broker_main_package }}",
        "confluent-schema-registry",
        "confluent-security"
    ],
    "schema_registry_pause_rolling_deployment": "{{pause_rolling_deployment}}",
    "schema_registry_properties": {
        "defaults": {
            "enabled": true,
            "properties": {
                "confluent.license.topic": "_confluent-license",
                "debug": "false",
                "host.name": "{{ hostvars[inventory_hostname]|resolve_hostname }}",
                "inter.instance.protocol": "{{schema_registry_http_protocol}}",
                "kafkastore.bootstrap.servers": "{{ groups['kafka_broker'] | default(['localhost'])  | resolve_hostnames(hostvars) | join(':' + kafka_broker_listeners[schema_registry_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[schema_registry_kafka_listener_name]['port']}}",
                "kafkastore.topic": "_schemas",
                "kafkastore.topic.replication.factor": "{{schema_registry_default_internal_replication_factor}}",
                "listeners": "{{schema_registry_http_protocol}}://0.0.0.0:{{schema_registry_listener_port}}",
                "schema.registry.group.id": "schema-registry"
            }
        },
        "kafka_client": {
            "enabled": true,
            "properties": "{{ kafka_broker_listeners[schema_registry_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol, 'kafkastore.', schema_registry_truststore_path, schema_registry_truststore_storepass, schema_registry_keystore_path, schema_registry_keystore_storepass, schema_registry_keystore_keypass, false, sasl_plain_users.schema_registry.principal, sasl_plain_users.schema_registry.password, sasl_scram_users.schema_registry.principal, sasl_scram_users.schema_registry.password, kerberos_kafka_broker_primary, schema_registry_keytab_path, schema_registry_kerberos_principal|default('kafka'), false, schema_registry_ldap_user, schema_registry_ldap_password, mds_bootstrap_server_urls) }}"
        },
        "mtls": {
            "enabled": "{{ schema_registry_ssl_mutual_auth_enabled }}",
            "properties": {
                "ssl.client.auth": "true"
            }
        },
        "rbac": {
            "enabled": "{{rbac_enabled}}",
            "properties": {
                "authentication.roles": "**",
                "confluent.metadata.basic.auth.user.info": "{{ schema_registry_ldap_user | default('MISSING') }}:{{ schema_registry_ldap_password | default('MISSING')}}",
                "confluent.metadata.bootstrap.server.urls": "{{mds_bootstrap_server_urls}}",
                "confluent.metadata.http.auth.credentials.provider": "BASIC",
                "confluent.schema.registry.auth.mechanism": "JETTY_AUTH",
                "confluent.schema.registry.authorizer.class": "io.confluent.kafka.schemaregistry.security.authorizer.rbac.RbacAuthorizer",
                "public.key.path": "{{rbac_enabled_public_pem_path}}",
                "rest.servlet.initializor.classes": "io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler",
                "schema.registry.resource.extension.class": "io.confluent.kafka.schemaregistry.security.SchemaRegistrySecurityResourceExtension"
            }
        },
        "rbac_external_client": {
            "enabled": "{{ rbac_enabled and external_mds_enabled and mds_tls_enabled }}",
            "properties": {
                "kafkastore.ssl.truststore.location": "{{schema_registry_truststore_path}}",
                "kafkastore.ssl.truststore.password": "{{schema_registry_truststore_storepass}}"
            }
        },
        "ssl": {
            "enabled": "{{schema_registry_ssl_enabled}}",
            "properties": {
                "security.protocol": "SSL",
                "ssl.key.password": "{{schema_registry_keystore_keypass}}",
                "ssl.keystore.location": "{{schema_registry_keystore_path}}",
                "ssl.keystore.password": "{{schema_registry_keystore_storepass}}"
            }
        },
        "telemetry": {
            "enabled": "{{schema_registry_telemetry_enabled}}",
            "properties": {
                "confluent.telemetry.api.key": "{{telemetry_api_key}}",
                "confluent.telemetry.api.secret": "{{telemetry_api_secret}}",
                "confluent.telemetry.enabled": "true",
                "metric.reporters": "io.confluent.telemetry.reporter.TelemetryReporter"
            }
        },
        "telemetry_labels": {
            "enabled": "{{schema_registry_telemetry_ansible_labels_enabled}}",
            "properties": {
                "confluent.telemetry.labels.confluent.ansible.playbooks.version": "{{confluent_ansible_branch}}"
            }
        },
        "telemetry_proxy": {
            "enabled": "{{schema_registry_telemetry_enabled and telemetry_proxy_url != ''}}",
            "properties": {
                "confluent.telemetry.proxy.url": "{{telemetry_proxy_url}}"
            }
        },
        "telemetry_proxy_auth": {
            "enabled": "{{schema_registry_telemetry_enabled and telemetry_proxy_username != ''}}",
            "properties": {
                "confluent.telemetry.proxy.password": "{{telemetry_proxy_password}}",
                "confluent.telemetry.proxy.username": "{{telemetry_proxy_username}}"
            }
        },
        "truststore": {
            "enabled": "{{schema_registry_ssl_mutual_auth_enabled or mds_tls_enabled}}",
            "properties": {
                "ssl.truststore.location": "{{schema_registry_truststore_path}}",
                "ssl.truststore.password": "{{schema_registry_truststore_storepass}}"
            }
        }
    },
    "schema_registry_secrets_protection_enabled": "{{secrets_protection_enabled}}",
    "schema_registry_secrets_protection_encrypt_passwords": "{{schema_registry_secrets_protection_enabled}}",
    "schema_registry_secrets_protection_encrypt_properties": [],
    "schema_registry_service_name": "confluent-schema-registry",
    "schema_registry_ssl_enabled": "{{ssl_enabled}}",
    "schema_registry_ssl_mutual_auth_enabled": "{{ ssl_mutual_auth_enabled }}",
    "schema_registry_telemetry_ansible_labels_enabled": "{{schema_registry_telemetry_enabled}}",
    "schema_registry_telemetry_enabled": "{{telemetry_enabled}}",
    "schema_registry_truststore_path": "/var/ssl/private/schema_registry.truststore.jks",
    "schema_registry_truststore_storepass": "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "schema_registry_url": "{{schema_registry_http_protocol}}://{{ groups['schema_registry'] | default(['localhost']) | resolve_hostnames(hostvars) | join(':' + schema_registry_listener_port|string + ',' + schema_registry_http_protocol + '://') }}:{{schema_registry_listener_port}}",
    "schema_registry_user": "{{schema_registry_default_user}}",
    "secrets_protection_enabled": false,
    "secrets_protection_masterkey": "",
    "secrets_protection_security_file": "generated_ssl_files/security.properties",
    "self_signed": "{{ false if ssl_provided_keystore_and_truststore|bool or ssl_custom_certs|bool else true }}",
    "ssl_ca_cert_filepath": "",
    "ssl_custom_certs": false,
    "ssl_custom_certs_remote_src": false,
    "ssl_enabled": false,
    "ssl_key_filepath": "",
    "ssl_key_password": "",
    "ssl_keystore_alias": "",
    "ssl_keystore_filepath": "",
    "ssl_keystore_key_password": "",
    "ssl_keystore_store_password": "",
    "ssl_mutual_auth_enabled": false,
    "ssl_provided_keystore_and_truststore": false,
    "ssl_self_signed_ca_cert_filename": "snakeoil-ca-1.crt",
    "ssl_self_signed_ca_key_filename": "snakeoil-ca-1.key",
    "ssl_self_signed_ca_password": "capassword123",
    "ssl_signed_cert_filepath": "",
    "ssl_truststore_ca_cert_alias": "",
    "ssl_truststore_filepath": "",
    "ssl_truststore_password": "",
    "telemetry_api_key": "",
    "telemetry_api_secret": "",
    "telemetry_enabled": false,
    "telemetry_proxy_password": "",
    "telemetry_proxy_url": "",
    "telemetry_proxy_username": "",
    "token_services_private_pem_file": "generated_ssl_files/tokenKeypair.pem",
    "token_services_public_pem_file": "generated_ssl_files/public.pem",
    "zookeeper": {
        "config_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/zookeeper.properties",
        "jaas_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/zookeeper_jaas.conf",
        "log4j_file": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/zookeeper-log4j.properties",
        "log_path": "{{zookeeper_default_log_dir}}",
        "properties": {},
        "server_start_file": "{{ binary_base_path }}/bin/zookeeper-server-start",
        "systemd_file": "/usr/lib/systemd/system/{{zookeeper_service_name}}.service",
        "systemd_override": "/etc/systemd/system/{{zookeeper_service_name}}.service.d/override.conf"
    },
    "zookeeper_ca_cert_path": "/var/ssl/private/ca.crt",
    "zookeeper_cert_path": "/var/ssl/private/zookeeper.crt",
    "zookeeper_client_port": "{{'2182' if zookeeper_ssl_enabled|bool else '2181'}}",
    "zookeeper_combined_properties": "{{ zookeeper_properties | combine_properties }}",
    "zookeeper_copy_files": [],
    "zookeeper_current_node_hostname": "{{ hostvars[inventory_hostname]|resolve_hostname }}",
    "zookeeper_custom_properties": {
        "4lw.commands.whitelist": "stat, ruok, srvr, mntr",
        "tcpKeepAlive": "true"
    },
    "zookeeper_default_group": "confluent",
    "zookeeper_default_log_dir": "/var/log/kafka",
    "zookeeper_default_user": "cp-kafka",
    "zookeeper_deployment_strategy": "{{deployment_strategy}}",
    "zookeeper_digest_users": {
        "admin": {
            "password": "admin-secret",
            "principal": "admin"
        },
        "kafka_broker": {
            "password": "kafka_broker-secret",
            "principal": "kafka_broker"
        }
    },
    "zookeeper_export_certs": "{{zookeeper_ssl_mutual_auth_enabled}}",
    "zookeeper_final_properties": "{{ zookeeper_combined_properties | combine(zookeeper_custom_properties) }}",
    "zookeeper_group": "{{zookeeper_default_group}}",
    "zookeeper_health_check_command": "{% if zookeeper_sasl_protocol in ['kerberos', 'digest'] %}KAFKA_OPTS='-Djava.security.auth.login.config={{zookeeper.jaas_file}}'{% endif %} {{ binary_base_path }}/bin/kafka-run-class {% if zookeeper_ssl_enabled|bool %} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.ssl.trustStore.location={{zookeeper_truststore_path}} -Dzookeeper.ssl.trustStore.password={{zookeeper_truststore_storepass}} -Dzookeeper.ssl.keyStore.location={{zookeeper_keystore_path}} -Dzookeeper.ssl.keyStore.password={{zookeeper_keystore_storepass}} -Dzookeeper.client.secure=true {% endif %} org.apache.zookeeper.client.FourLetterWordMain {{zookeeper_health_check_host | default(hostvars[inventory_hostname]|resolve_hostname) }} {{zookeeper_client_port}} srvr {% if zookeeper_ssl_enabled|bool %}true{% endif %}",
    "zookeeper_health_checks_enabled": "{{health_checks_enabled}}",
    "zookeeper_jmxexporter_config_path": "/opt/prometheus/zookeeper.yml",
    "zookeeper_jmxexporter_enabled": "{{jmxexporter_enabled}}",
    "zookeeper_jmxexporter_port": 8079,
    "zookeeper_jolokia_auth_mode": "{{jolokia_auth_mode}}",
    "zookeeper_jolokia_config": "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/zookeeper_jolokia.properties",
    "zookeeper_jolokia_enabled": "{{jolokia_enabled}}",
    "zookeeper_jolokia_password": "{{jolokia_password}}",
    "zookeeper_jolokia_port": 7770,
    "zookeeper_jolokia_ssl_enabled": "{{ zookeeper_ssl_enabled }}",
    "zookeeper_jolokia_user": "{{jolokia_user}}",
    "zookeeper_key_path": "/var/ssl/private/zookeeper.key",
    "zookeeper_keystore_keypass": "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else zookeeper_keystore_storepass }}",
    "zookeeper_keystore_path": "/var/ssl/private/zookeeper.keystore.jks",
    "zookeeper_keystore_storepass": "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}",
    "zookeeper_keytab_path": "/etc/security/keytabs/zookeeper.keytab",
    "zookeeper_leader_port": 3888,
    "zookeeper_log_dir": "{{zookeeper.log_path}}",
    "zookeeper_main_package": "{{ 'confluent-server' if confluent_server_enabled|bool else 'confluent-kafka'}}",
    "zookeeper_packages": [
        "confluent-common",
        "confluent-rest-utils",
        "confluent-metadata-service",
        "confluent-ce-kafka-http-server",
        "confluent-kafka-rest",
        "confluent-server-rest",
        "confluent-telemetry",
        "{{ zookeeper_main_package }}"
    ],
    "zookeeper_pause_rolling_deployment": "{{pause_rolling_deployment}}",
    "zookeeper_peer_port": 2888,
    "zookeeper_properties": {
        "defaults": {
            "enabled": true,
            "properties": {
                "admin.enableServer": "false",
                "autopurge.purgeInterval": 1,
                "autopurge.snapRetainCount": 10,
                "dataDir": "/var/lib/zookeeper",
                "initLimit": 5,
                "maxClientCnxns": 0,
                "syncLimit": 2
            }
        },
        "non_secure": {
            "enabled": "{{not zookeeper_ssl_enabled}}",
            "properties": {
                "clientPort": "{{zookeeper_client_port}}"
            }
        },
        "sasl": {
            "enabled": "{{ zookeeper_sasl_protocol in ['kerberos', 'digest'] }}",
            "properties": {
                "authProvider.sasl": "org.apache.zookeeper.server.auth.SASLAuthenticationProvider"
            }
        },
        "sasl_kerberos": {
            "enabled": "{{ zookeeper_sasl_protocol == 'kerberos' }}",
            "properties": {
                "kerberos.removeHostFromPrincipal": "true",
                "kerberos.removeRealmFromPrincipal": "true"
            }
        },
        "servers": {
            "enabled": true,
            "properties": "{{ zookeeper_servers | split_to_dict }}"
        },
        "ssl": {
            "enabled": "{{zookeeper_ssl_enabled}}",
            "properties": {
                "authProvider.x509": "org.apache.zookeeper.server.auth.X509AuthenticationProvider",
                "secureClientPort": "{{zookeeper_client_port}}",
                "serverCnxnFactory": "org.apache.zookeeper.server.NettyServerCnxnFactory",
                "ssl.clientAuth": "{{ 'need' if zookeeper_ssl_mutual_auth_enabled|bool else 'none' }}",
                "ssl.keyStore.location": "{{zookeeper_keystore_path}}",
                "ssl.keyStore.password": "{{zookeeper_keystore_storepass}}",
                "ssl.quorum.keyStore.location": "{{zookeeper_keystore_path}}",
                "ssl.quorum.keyStore.password": "{{zookeeper_keystore_storepass}}",
                "ssl.quorum.trustStore.location": "{{zookeeper_truststore_path}}",
                "ssl.quorum.trustStore.password": "{{zookeeper_truststore_storepass}}",
                "ssl.trustStore.location": "{{zookeeper_truststore_path}}",
                "ssl.trustStore.password": "{{zookeeper_truststore_storepass}}",
                "sslQuorum": "true"
            }
        },
        "ssl_fips": {
            "enabled": "{{ zookeeper_ssl_enabled and pkcs12_enabled }}",
            "properties": {
                "ssl.keymanager.algorithm": "PKIX",
                "ssl.quorum.keymanager.algorithm": "PKIX",
                "ssl.quorum.trustmanager.algorithm": "PKIX",
                "ssl.trustmanager.algorithm": "PKIX"
            }
        }
    },
    "zookeeper_sasl_protocol": "{{sasl_protocol if sasl_protocol == 'kerberos' else 'none'}}",
    "zookeeper_servers": "{% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}server.{{ hostvars[host]['zookeeper_id'] | default(groups.zookeeper.index(host) + 1)}}={{ zookeeper_current_node_hostname if host == inventory_hostname else hostvars[host]|resolve_hostname }}:{{zookeeper_peer_port}}:{{zookeeper_leader_port}}{% endfor %}",
    "zookeeper_service_name": "confluent-zookeeper",
    "zookeeper_ssl_enabled": "{{ssl_enabled}}",
    "zookeeper_ssl_mutual_auth_enabled": "{{ssl_mutual_auth_enabled}}",
    "zookeeper_truststore_path": "/var/ssl/private/zookeeper.truststore.jks",
    "zookeeper_truststore_storepass": "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}",
    "zookeeper_user": "{{zookeeper_default_user}}"
}"